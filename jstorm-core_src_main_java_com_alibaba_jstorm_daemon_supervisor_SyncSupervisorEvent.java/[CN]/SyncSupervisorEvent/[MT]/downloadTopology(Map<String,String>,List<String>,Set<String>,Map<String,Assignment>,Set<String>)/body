{
  Set<String> downloadTopologys=new HashSet<String>();
  for (  Entry<String,String> entry : topologyCodes.entrySet()) {
    String topologyId=entry.getKey();
    String masterCodeDir=entry.getValue();
    if (!downloadedTopologyIds.contains(topologyId) || updateTopologys.contains(topologyId)) {
      LOG.info("Downloading code for storm id " + topologyId + " from "+ masterCodeDir);
      int retry=0;
      while (retry < 3) {
        try {
          downloadStormCode(conf,topologyId,masterCodeDir);
          StormConfig.write_supervisor_topology_timestamp(conf,topologyId,assignments.get(topologyId).getTimeStamp());
          break;
        }
 catch (        IOException e) {
          LOG.error(e + " downloadStormCode failed " + "topologyId:"+ topologyId+ "masterCodeDir:"+ masterCodeDir);
        }
catch (        TException e) {
          LOG.error(e + " downloadStormCode failed " + "topologyId:"+ topologyId+ "masterCodeDir:"+ masterCodeDir);
        }
        retry++;
      }
      if (retry < 3) {
        LOG.info("Finished downloading code for storm id " + topologyId + " from "+ masterCodeDir);
        downloadTopologys.add(topologyId);
      }
 else {
        LOG.error("Cann't  download code for storm id " + topologyId + " from "+ masterCodeDir);
        downloadFailedTopologyIds.add(topologyId);
      }
    }
  }
  for (  String topologyId : downloadFailedTopologyIds) {
    if (!downloadedTopologyIds.contains(topologyId)) {
      try {
        String stormroot=StormConfig.supervisor_stormdist_root(conf,topologyId);
        File destDir=new File(stormroot);
        FileUtils.deleteQuietly(destDir);
      }
 catch (      Exception e) {
        LOG.error("Cann't  clear directory about storm id " + topologyId + " on supervisor ");
      }
    }
  }
  updateTaskCleanupTimeout(downloadTopologys);
}
