{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
        struct.supervisor=new SupervisorSummary();
        struct.supervisor.read(iprot);
        struct.set_supervisor_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list136=iprot.readListBegin();
      struct.workers=new ArrayList<WorkerSummary>(_list136.size);
      WorkerSummary _elem137;
      for (int _i138=0; _i138 < _list136.size; ++_i138) {
        _elem137=new WorkerSummary();
        _elem137.read(iprot);
        struct.workers.add(_elem137);
      }
      iprot.readListEnd();
    }
    struct.set_workers_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map139=iprot.readMapBegin();
  struct.workerMetric=new HashMap<String,MetricInfo>(2 * _map139.size);
  String _key140;
  MetricInfo _val141;
  for (int _i142=0; _i142 < _map139.size; ++_i142) {
    _key140=iprot.readString();
    _val141=new MetricInfo();
    _val141.read(iprot);
    struct.workerMetric.put(_key140,_val141);
  }
  iprot.readMapEnd();
}
struct.set_workerMetric_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
