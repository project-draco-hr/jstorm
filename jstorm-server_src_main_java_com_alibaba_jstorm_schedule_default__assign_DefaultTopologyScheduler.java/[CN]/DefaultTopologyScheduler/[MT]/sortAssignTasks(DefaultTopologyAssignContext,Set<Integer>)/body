{
  List<Integer> ret=new ArrayList<Integer>();
  StormTopology rawTopology=context.getRawTopology();
  final Map<Integer,String> taskToComponent=context.getTaskToComponent();
  final Map<String,Integer> componentToWeight=computeComponentWeight(rawTopology,context);
  ret=JStormUtils.mk_list(needAssign);
  Collections.sort(ret,new Comparator<Integer>(){
    private int getWeight(    int taskId){
      String component=taskToComponent.get(taskId);
      if (component == null) {
        return context.DEFAULT_WEIGHT;
      }
      Integer weight=componentToWeight.get(component);
      if (weight == null) {
        return context.DEFAULT_WEIGHT;
      }
 else {
        return weight;
      }
    }
    @Override public int compare(    Integer first,    Integer second){
      int firstWeight=getWeight(first);
      int secondWeight=getWeight(second);
      if (firstWeight != secondWeight) {
        return (secondWeight - firstWeight);
      }
 else {
        return (second - first);
      }
    }
  }
);
  return ret;
}
