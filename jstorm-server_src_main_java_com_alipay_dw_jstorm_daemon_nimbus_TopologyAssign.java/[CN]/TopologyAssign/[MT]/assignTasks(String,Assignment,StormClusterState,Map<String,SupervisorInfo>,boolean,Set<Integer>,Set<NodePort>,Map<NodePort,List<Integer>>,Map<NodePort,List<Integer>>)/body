{
  Map<?,?> topology_conf=StormConfig.read_nimbus_topology_conf(nimbusData.getConf(),topologyId);
  Integer workerNum=JStormUtils.parseInt(topology_conf.get(Config.TOPOLOGY_WORKERS));
  if (workerNum == null || workerNum <= 0) {
    String errMsg="There are no Config.TOPOLOGY_WORKERS in configuration of " + topologyId;
    LOG.error(errMsg);
    throw new InvalidParameterException(errMsg);
  }
  Map<NodePort,List<Integer>> keepAssigned=new HashMap<NodePort,List<Integer>>();
  keepAssigned.putAll(unstopped);
  if (workerNum <= unstopped.size()) {
    String errMsg="Unstopped workers is bigger than the setting " + topologyId;
    LOG.error(errMsg);
    throw new InvalidParameterException(errMsg);
  }
  if (isScratch == true) {
  }
 else {
    Set<Integer> deadTasks=new HashSet<Integer>();
    deadTasks.addAll(allTaskIds);
    for (    Entry<NodePort,List<Integer>> entry : aliveAssigned.entrySet()) {
      List<Integer> aliveTasks=entry.getValue();
      deadTasks.removeAll(aliveTasks);
    }
    if (freeSlots.size() >= deadTasks.size()) {
      if ((workerNum - unstopped.size()) > aliveAssigned.size()) {
        keepAssigned.putAll(aliveAssigned);
      }
    }
  }
  Map<Integer,NodePort> stayAssignment=new HashMap<Integer,NodePort>();
  for (  Entry<NodePort,List<Integer>> entry : keepAssigned.entrySet()) {
    NodePort np=entry.getKey();
    List<Integer> tasks=entry.getValue();
    for (    Integer taskid : tasks) {
      stayAssignment.put(taskid,np);
    }
  }
  LOG.info("For " + topologyId + " keep slots "+ stayAssignment);
  Set<NodePort> availableSlots=new TreeSet<NodePort>();
  availableSlots.addAll(freeSlots);
  availableSlots.addAll(aliveAssigned.keySet());
  availableSlots.removeAll(keepAssigned.keySet());
  List<NodePort> sortedAvailableSlots=sortSlots(availableSlots,(workerNum - keepAssigned.size()));
  TreeSet<Integer> needAssigneds=new TreeSet<Integer>();
  needAssigneds.addAll(allTaskIds);
  needAssigneds.removeAll(stayAssignment.keySet());
  Map<Integer,NodePort> newAssginment=new HashMap<Integer,NodePort>();
  int slotPos=0;
  for (  Integer newTask : needAssigneds) {
    newAssginment.put(newTask,sortedAvailableSlots.get(slotPos++));
    if (slotPos == sortedAvailableSlots.size()) {
      slotPos=0;
    }
  }
  LOG.info("For " + topologyId + " new assign slots "+ newAssginment);
  Map<Integer,NodePort> assignment=new HashMap<Integer,NodePort>();
  assignment.putAll(stayAssignment);
  assignment.putAll(newAssginment);
  return assignment;
}
