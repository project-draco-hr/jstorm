{
  Map<StaticsType,List<Object>> ret=new HashMap<StaticsType,List<Object>>();
  List<Object> emitted=new ArrayList<Object>();
  List<Object> sendTps=new ArrayList<Object>();
  List<Object> recvTps=new ArrayList<Object>();
  List<Object> acked=new ArrayList<Object>();
  List<Object> failed=new ArrayList<Object>();
  List<Object> process=new ArrayList<Object>();
  ret.put(StaticsType.emitted,emitted);
  ret.put(StaticsType.send_tps,sendTps);
  ret.put(StaticsType.recv_tps,recvTps);
  ret.put(StaticsType.acked,acked);
  ret.put(StaticsType.failed,failed);
  ret.put(StaticsType.process_latencies,process);
  for (  TaskSummary taskSummary : taskSummaries) {
    TaskStats taskStats=taskSummary.get_stats();
    if (taskStats == null) {
      continue;
    }
    Map<String,Long> emittedMap=mergeStream(taskStats.get_emitted(),Long.valueOf(0));
    emitted.add(emittedMap.get(window));
    Map<String,Double> rendTpsMap=mergeStream(taskStats.get_send_tps(),Double.valueOf(0));
    sendTps.add(rendTpsMap.get(window));
    Map<String,Double> recvTpsMap=mergeStream(taskStats.get_recv_tps(),Double.valueOf(0));
    recvTps.add(recvTpsMap.get(window));
    Map<String,Long> ackedMap=mergeStream(taskStats.get_acked(),Long.valueOf(0));
    acked.add(ackedMap.get(window));
    Map<String,Long> failedMap=mergeStream(taskStats.get_failed(),Long.valueOf(0));
    failed.add(failedMap.get(window));
    Map<String,Double> processMap=mergeStream(taskStats.get_process_ms_avg(),Double.valueOf(0));
    process.add(processMap.get(window));
  }
  return ret;
}
