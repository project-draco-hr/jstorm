{
  this.data=data;
  this.sleepTime=sleepTime;
  boolean isLocaliP;
  if (!ConfigExtension.isNimbusUseIp(data.getConf())) {
    this.hostPort=NetWorkUtils.hostname() + ":" + String.valueOf(Utils.getInt(data.getConf().get(Config.NIMBUS_THRIFT_PORT)));
    isLocaliP=NetWorkUtils.hostname().equals("localhost");
  }
 else {
    this.hostPort=NetWorkUtils.ip() + ":" + String.valueOf(Utils.getInt(data.getConf().get(Config.NIMBUS_THRIFT_PORT)));
    isLocaliP=NetWorkUtils.ip().equals("127.0.0.1");
  }
  try {
    if (isLocaliP) {
      throw new Exception("the hostname which Nimbus get is localhost");
    }
  }
 catch (  Exception e1) {
    LOG.error("get nimbus host error!",e1);
    throw new RuntimeException(e1);
  }
  try {
    data.getStormClusterState().update_nimbus_slave(hostPort,data.uptime());
    data.getStormClusterState().update_nimbus_detail(hostPort,null);
  }
 catch (  Exception e) {
    LOG.error("register nimbus host fail!",e);
    throw new RuntimeException();
  }
  try {
    StormClusterState zkClusterState=data.getStormClusterState();
    if (!zkClusterState.leader_existed()) {
      this.tryToBeLeader(data.getConf());
    }
  }
 catch (  Exception e) {
    LOG.error("register detail of nimbus fail!",e);
    throw new RuntimeException();
  }
  try {
    this.tryToBeLeader(data.getConf());
  }
 catch (  Exception e1) {
    try {
      data.getStormClusterState().unregister_nimbus_host(hostPort);
      data.getStormClusterState().unregister_nimbus_detail(hostPort);
    }
 catch (    Exception e2) {
      LOG.info("due to task errors, so remove register nimbus infomation");
    }
 finally {
      LOG.error("try to be leader error.",e1);
      throw new RuntimeException(e1);
    }
  }
  callback=new RunnableCallback(){
    @Override public void run(){
      if (!data.isLeader())       check();
    }
  }
;
}
