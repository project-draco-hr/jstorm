{
  this.data=data;
  this.sleepTime=sleepTime;
  if (!ConfigExtension.isNimbusUseIp(data.getConf())) {
    this.hostPort=NetWorkUtils.hostname() + ":" + String.valueOf(Utils.getInt(data.getConf().get(Config.NIMBUS_THRIFT_PORT)));
  }
 else {
    this.hostPort=NetWorkUtils.ip() + ":" + String.valueOf(Utils.getInt(data.getConf().get(Config.NIMBUS_THRIFT_PORT)));
  }
  try {
    String[] hostfigs=this.hostPort.split(":");
    boolean isLocaliP=false;
    if (hostfigs.length > 0) {
      isLocaliP=hostfigs[0].equals("127.0.0.1");
    }
    if (isLocaliP) {
      throw new Exception("the hostname which Nimbus get is localhost");
    }
  }
 catch (  Exception e1) {
    LOG.error("get nimbus host error!",e1);
    throw new RuntimeException(e1);
  }
  try {
    this.tryToBeLeader(data.getConf());
  }
 catch (  Exception e1) {
    LOG.error("try to be leader error.",e1);
    throw new RuntimeException(e1);
  }
  try {
    data.getStormClusterState().update_nimbus_slave(hostPort,data.uptime());
  }
 catch (  Exception e) {
    LOG.error("register nimbus host fail!",e);
    throw new RuntimeException();
  }
  callback=new RunnableCallback(){
    @Override public void run(){
      if (!data.isLeader())       check();
    }
  }
;
}
