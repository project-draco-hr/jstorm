{
  org.apache.thrift7.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift7.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift7.protocol.TType.STRING) {
        this.hostname=iprot.readString();
      }
 else {
        org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift7.protocol.TType.I32) {
    this.port=iprot.readI32();
    set_port_isSet(true);
  }
 else {
    org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == org.apache.thrift7.protocol.TType.MAP) {
{
  org.apache.thrift7.protocol.TMap _map234=iprot.readMapBegin();
  this.gauge=new HashMap<String,Double>(2 * _map234.size);
  for (int _i235=0; _i235 < _map234.size; ++_i235) {
    String _key236;
    double _val237;
    _key236=iprot.readString();
    _val237=iprot.readDouble();
    this.gauge.put(_key236,_val237);
  }
  iprot.readMapEnd();
}
}
 else {
org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == org.apache.thrift7.protocol.TType.MAP) {
{
org.apache.thrift7.protocol.TMap _map238=iprot.readMapBegin();
this.counter=new HashMap<String,Double>(2 * _map238.size);
for (int _i239=0; _i239 < _map238.size; ++_i239) {
String _key240;
double _val241;
_key240=iprot.readString();
_val241=iprot.readDouble();
this.counter.put(_key240,_val241);
}
iprot.readMapEnd();
}
}
 else {
org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == org.apache.thrift7.protocol.TType.MAP) {
{
org.apache.thrift7.protocol.TMap _map242=iprot.readMapBegin();
this.meter=new HashMap<String,Double>(2 * _map242.size);
for (int _i243=0; _i243 < _map242.size; ++_i243) {
String _key244;
double _val245;
_key244=iprot.readString();
_val245=iprot.readDouble();
this.meter.put(_key244,_val245);
}
iprot.readMapEnd();
}
}
 else {
org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == org.apache.thrift7.protocol.TType.MAP) {
{
org.apache.thrift7.protocol.TMap _map246=iprot.readMapBegin();
this.timer=new HashMap<String,Double>(2 * _map246.size);
for (int _i247=0; _i247 < _map246.size; ++_i247) {
String _key248;
double _val249;
_key248=iprot.readString();
_val249=iprot.readDouble();
this.timer.put(_key248,_val249);
}
iprot.readMapEnd();
}
}
 else {
org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 7:
if (field.type == org.apache.thrift7.protocol.TType.MAP) {
{
org.apache.thrift7.protocol.TMap _map250=iprot.readMapBegin();
this.histogram=new HashMap<String,Double>(2 * _map250.size);
for (int _i251=0; _i251 < _map250.size; ++_i251) {
String _key252;
double _val253;
_key252=iprot.readString();
_val253=iprot.readDouble();
this.histogram.put(_key252,_val253);
}
iprot.readMapEnd();
}
}
 else {
org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
default :
org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
