{
  Map<Integer,MetricSnapshot> existing=metricInfo.get_metrics().get(meta);
  if (existing == null) {
    metricInfo.put_to_metrics(meta,data);
    Map<Integer,Timer> timerMap=new HashMap<>();
    for (    Map.Entry<Integer,MetricSnapshot> dataEntry : data.entrySet()) {
      Timer timer=MetricUtils.metricSnapshot2Timer(dataEntry.getValue());
      timerMap.put(dataEntry.getKey(),timer);
    }
    timers.put(meta,timerMap);
  }
 else {
    for (    Map.Entry<Integer,MetricSnapshot> dataEntry : data.entrySet()) {
      Integer win=dataEntry.getKey();
      MetricSnapshot snapshot=dataEntry.getValue();
      MetricSnapshot old=existing.get(win);
      if (old == null) {
        existing.put(win,snapshot);
        timers.get(meta).put(win,MetricUtils.metricSnapshot2Timer(snapshot));
      }
 else {
        if (snapshot.get_ts() >= old.get_ts()) {
          old.set_ts(snapshot.get_ts());
          old.set_m1(old.get_m1() + snapshot.get_m1());
          old.set_m5(old.get_m5() + snapshot.get_m5());
          old.set_m15(old.get_m15() + snapshot.get_m15());
          MetricUtils.updateTimerPoints(timers.get(meta).get(win),snapshot.get_points());
        }
      }
    }
  }
  updateMetricCounters(meta,metaCounters);
}
