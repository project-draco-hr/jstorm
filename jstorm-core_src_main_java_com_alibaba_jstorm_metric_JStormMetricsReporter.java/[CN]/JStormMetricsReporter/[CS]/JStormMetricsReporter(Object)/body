{
  LOG.info("starting jstorm metrics reporter in {}",role.getClass().getSimpleName());
  if (role instanceof WorkerData) {
    WorkerData workerData=(WorkerData)role;
    this.conf=workerData.getStormConf();
    this.topologyId=(String)conf.get(Config.TOPOLOGY_ID);
    this.port=workerData.getPort();
    this.isInWorker=true;
  }
 else   if (role instanceof NimbusData) {
    NimbusData nimbusData=(NimbusData)role;
    this.conf=nimbusData.getConf();
    this.topologyId=JStormMetrics.NIMBUS_METRIC_KEY;
  }
 else   if (role instanceof SupervisorManger) {
    SupervisorManger supervisor=(SupervisorManger)role;
    this.conf=supervisor.getConf();
    this.topologyId=JStormMetrics.SUPERVISOR_METRIC_KEY;
    JStormMetrics.setTopologyId(this.topologyId);
  }
  JStormMetrics.enabled=ConfigExtension.isEnableMetrics(conf);
  JStormMetrics.setDebug(ConfigExtension.isEnableMetricDebug(conf));
  JStormMetrics.addDebugMetrics(ConfigExtension.getDebugMetricNames(conf));
  JStormMetrics.setTimerUpdateInterval(ConfigExtension.getTimerUpdateInterval(conf));
  this.host=JStormMetrics.getHost();
  if (!JStormMetrics.enabled) {
    LOG.warn("***** topology metrics is disabled! *****");
  }
 else {
    LOG.info("topology metrics is enabled.");
  }
  this.checkMetaThreadCycle=30;
  this.flushMetricThreadCycle=1;
  LOG.info("check meta thread freq: {} sec, flush metrics thread freq: {} sec",checkMetaThreadCycle,flushMetricThreadCycle);
  this.localMode=StormConfig.local_mode(conf);
  this.clusterName=ConfigExtension.getClusterName(conf);
  LOG.info("done.");
}
