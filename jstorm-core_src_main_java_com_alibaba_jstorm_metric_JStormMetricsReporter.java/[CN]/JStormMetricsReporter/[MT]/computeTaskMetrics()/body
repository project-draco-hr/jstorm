{
  Map<Integer,MetricInfo> ret=new HashMap<Integer,MetricInfo>();
  for (  Entry<Integer,MetricRegistry> entry : taskMetrics.entrySet()) {
    Integer taskId=entry.getKey();
    MetricRegistry taskMetrics=entry.getValue();
    Map<String,Map<String,MetricWindow>> inputMap=new HashMap<String,Map<String,MetricWindow>>();
    Map<String,Map<String,MetricWindow>> outputMap=new HashMap<String,Map<String,MetricWindow>>();
    MetricInfo taskMetricInfo=MetricThrift.mkMetricInfo();
    taskMetricInfo.set_inputMetric(inputMap);
    taskMetricInfo.set_outputMetric(outputMap);
    ret.put(taskId,taskMetricInfo);
    for (    Entry<String,Metric> metricEntry : taskMetrics.getMetrics().entrySet()) {
      String name=metricEntry.getKey();
      Metric metric=metricEntry.getValue();
      Map<Integer,Double> snapshot=metric.getSnapshot();
      boolean isInput=getMoreMetric(inputMap,inputFilter,name,snapshot);
      boolean isOutput=getMoreMetric(outputMap,outputFilter,name,snapshot);
      if (isInput == false && isOutput == false) {
        MetricThrift.insert(taskMetricInfo,name,snapshot);
      }
    }
    MetricThrift.merge(taskMetricInfo,inputMap);
    MetricThrift.merge(taskMetricInfo,outputMap);
  }
  JStormMetrics.setExposeTaskMetrics(ret);
  return ret;
}
