{
  boolean found=false;
  String path=Cluster.taskerror_path(topologyId,taskId);
  cluster_state.mkdirs(path);
  List<Integer> children=new ArrayList<Integer>();
  String timeStamp=String.valueOf(TimeUtils.current_time_secs());
  String timestampPath=path + Cluster.ZK_SEPERATOR + timeStamp;
  for (  String str : cluster_state.get_children(path,false)) {
    children.add(Integer.parseInt(str));
    String errorPath=path + "/" + str;
    byte[] data=cluster_state.get_data(errorPath,false);
    if (data == null)     continue;
    String errorInfo=new String(data);
    if (errorInfo.equals(error)) {
      cluster_state.delete_node(errorPath);
      cluster_state.set_data(timestampPath,error.getBytes());
      found=true;
      break;
    }
  }
  if (found == false) {
    Collections.sort(children);
    while (children.size() >= 10) {
      cluster_state.delete_node(path + Cluster.ZK_SEPERATOR + children.remove(0));
    }
    cluster_state.set_data(timestampPath,error.getBytes());
  }
  String taskErrTopoPath=Cluster.taskerror_storm_root(topologyId);
  cluster_state.set_data(taskErrTopoPath + "/" + "last_error",timeStamp.getBytes());
}
