{
  RuntimeMXBean runtimeMXBean=ManagementFactory.getRuntimeMXBean();
  String pid=runtimeMXBean.getName().split("@")[0];
  LOG.debug("worker's pid is " + pid);
  String dumpOutFile=JStormUtils.getLogFileName();
  if (dumpOutFile == null) {
    return;
  }
 else {
    dumpOutFile+=".dump";
  }
  try {
    File file=new File(dumpOutFile);
    if (file.exists() == false) {
      PathUtils.touch(dumpOutFile);
    }
  }
 catch (  Exception e) {
    LOG.warn("Failed to touch " + dumpOutFile,e);
    return;
  }
  try {
    PrintWriter outFile=new PrintWriter(new FileWriter(dumpOutFile,true));
    StringBuilder jstackCommand=new StringBuilder();
    jstackCommand.append("jstack ");
    jstackCommand.append(pid);
    LOG.debug("Begin to execute " + jstackCommand.toString());
    String jstackOutput=JStormUtils.launchProcess(jstackCommand.toString(),new HashMap<String,String>(),false);
    outFile.println(jstackOutput);
    StringBuilder jmapCommand=new StringBuilder();
    jmapCommand.append("jmap -heap ");
    jmapCommand.append(pid);
    LOG.debug("Begin to execute " + jmapCommand.toString());
    String jmapOutput=JStormUtils.launchProcess(jmapCommand.toString(),new HashMap<String,String>(),false);
    outFile.println(jmapOutput);
  }
 catch (  Exception e) {
    LOG.error("can't excute jstack and jmap about " + pid);
    LOG.error(String.valueOf(e));
  }
}
