{
  this.storm_conf=_storm_conf;
  this.puller=_puller;
  this.userTopologyCtx=_user_context;
  this.task_stats=_task_stats;
  this.taskId=topology_context.getThisTaskId();
  this.innerTaskTransfer=innerTaskTransfer;
  this.component_id=topology_context.getThisComponentId();
  this.idStr="ComponentId:" + component_id + ",taskId:"+ taskId+ " ";
  this.taskStatus=taskStatus;
  this.report_error=_report_error;
  this.deserializer=new KryoTupleDeserializer(storm_conf,topology_context);
  this.isDebugRecv=ConfigExtension.isTopologyDebugRecvTuple(storm_conf);
  this.isDebug=JStormUtils.parseBoolean(storm_conf.get(Config.TOPOLOGY_DEBUG),false);
  message_timeout_secs=JStormUtils.parseInt(storm_conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS),30);
  int queue_size=Utils.getInt(storm_conf.get(Config.TOPOLOGY_TRANSFER_BUFFER_SIZE));
  WaitStrategy waitStrategy=(WaitStrategy)Utils.newInstance((String)storm_conf.get(Config.TOPOLOGY_DISRUPTOR_WAIT_STRATEGY));
  this.disruptorRecvQueue=new DisruptorQueue(new MultiThreadedClaimStrategy(queue_size),waitStrategy);
  this.disruptorRecvQueue.consumerStarted();
  this.registerInnerTransfer(disruptorRecvQueue);
  Thread recvThread=new Thread(new RecvRunnable(disruptorRecvQueue));
  recvThread.setName(component_id + "-" + taskId+ "-recvThread");
  recvThread.setPriority(Thread.MAX_PRIORITY);
  recvThread.setDaemon(true);
  recvThread.start();
}
