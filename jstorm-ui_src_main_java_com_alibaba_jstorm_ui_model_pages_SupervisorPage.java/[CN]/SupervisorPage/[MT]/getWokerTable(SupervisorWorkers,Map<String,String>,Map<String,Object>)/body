{
  TableData table=new TableData();
  List<String> headers=table.getHeaders();
  List<Map<String,ColumnData>> lines=table.getLines();
  table.setName(StringUtils.capitalize(UIDef.WOKER));
  headers.add(StringUtils.capitalize(UIDef.PORT));
  headers.add(UIDef.HEADER_UPTIME);
  headers.add(StringUtils.capitalize(UIDef.TOPOLOGY));
  headers.add(UIDef.HEADER_TASK_LIST);
  headers.add(UIDef.HEADER_LOG);
  headers.add(StringUtils.capitalize(UIDef.JSTACK));
  List<WorkerSummary> workerSummaries=supervisorWorkers.get_workers();
  if (workerSummaries == null) {
    LOG.error("Failed to get workers of " + paramMap.get(UIDef.HOST));
    return table;
  }
  int logServerPort=ConfigExtension.getSupervisorDeamonHttpserverPort(nimbusConf);
  for (  WorkerSummary workerSummary : workerSummaries) {
    Map<String,ColumnData> line=new HashMap<String,ColumnData>();
    lines.add(line);
    ColumnData portColumn=new ColumnData();
    portColumn.addText(String.valueOf(workerSummary.get_port()));
    line.put(StringUtils.capitalize(UIDef.PORT),portColumn);
    ColumnData uptimeColumn=new ColumnData();
    int uptime=workerSummary.get_uptime();
    uptimeColumn.addText(StatBuckets.prettyUptimeStr(uptime));
    line.put(UIDef.HEADER_UPTIME,uptimeColumn);
    ColumnData topologyColumn=new ColumnData();
    topologyColumn.addText(workerSummary.get_topology());
    line.put(StringUtils.capitalize(UIDef.TOPOLOGY),topologyColumn);
    ColumnData taskIdColumn=new ColumnData();
    line.put(UIDef.HEADER_TASK_LIST,taskIdColumn);
    for (    TaskComponent taskComponent : workerSummary.get_tasks()) {
      LinkData linkData=new LinkData();
      taskIdColumn.addLinkData(linkData);
      linkData.setUrl(UIDef.LINK_WINDOW_TABLE);
      linkData.setText(taskComponent.get_component() + "-" + taskComponent.get_taskId());
      linkData.addParam(UIDef.CLUSTER,paramMap.get(UIDef.CLUSTER));
      linkData.addParam(UIDef.PAGE_TYPE,UIDef.PAGE_TYPE_COMPONENT);
      linkData.addParam(UIDef.TOPOLOGY,workerSummary.get_topology());
      linkData.addParam(UIDef.COMPONENT,taskComponent.get_component());
    }
    ColumnData logColumn=new ColumnData();
    LinkData logLink=new LinkData();
    logColumn.addLinkData(logLink);
    line.put(UIDef.HEADER_LOG,logColumn);
    logLink.setUrl(UIDef.LINK_LOG);
    logLink.setText(UIDef.HEADER_LOG.toLowerCase());
    logLink.addParam(UIDef.CLUSTER,paramMap.get(UIDef.CLUSTER));
    logLink.addParam(UIDef.PAGE_TYPE,UIDef.PAGE_TYPE_LOG);
    logLink.addParam(UIDef.HOST,NetWorkUtils.host2Ip(supervisorWorkers.get_supervisor().get_host()));
    logLink.addParam(UIDef.TOPOLOGY,workerSummary.get_topology());
    logLink.addParam(UIDef.PORT,String.valueOf(workerSummary.get_port()));
    logLink.addParam(UIDef.LOG_SERVER_PORT,String.valueOf(logServerPort));
    ColumnData jstackColumn=new ColumnData();
    LinkData jstackLink=new LinkData();
    jstackColumn.addLinkData(jstackLink);
    line.put(StringUtils.capitalize(UIDef.JSTACK),jstackColumn);
    jstackLink.setUrl(UIDef.LINK_TABLE_PAGE);
    jstackLink.setText(UIDef.JSTACK);
    jstackLink.addParam(UIDef.CLUSTER,paramMap.get(UIDef.CLUSTER));
    jstackLink.addParam(UIDef.PAGE_TYPE,UIDef.PAGE_TYPE_JSTACK);
    jstackLink.addParam(UIDef.HOST,supervisorWorkers.get_supervisor().get_host());
    jstackLink.addParam(UIDef.TOPOLOGY,workerSummary.get_topology());
    jstackLink.addParam(UIDef.PORT,String.valueOf(workerSummary.get_port()));
    jstackLink.addParam(UIDef.LOG_SERVER_PORT,String.valueOf(logServerPort));
  }
  return table;
}
