{
  Map<Integer,Set<ResourceType>> weight=new TreeMap<Integer,Set<ResourceType>>(new Comparator<Integer>(){
    @Override public int compare(    Integer o1,    Integer o2){
      return o2.compareTo(o1);
    }
  }
);
  Set<ResourceType> cache=weight.get(defaultContext.CPU_WEIGHT);
  if (cache == null) {
    cache=new HashSet<ResourceType>();
    weight.put(defaultContext.CPU_WEIGHT,cache);
  }
  cache.add(ResourceType.CPU);
  cache=weight.get(defaultContext.MEM_WEIGHT);
  if (cache == null) {
    cache=new HashSet<ResourceType>();
    weight.put(defaultContext.MEM_WEIGHT,cache);
  }
  cache.add(ResourceType.MEM);
  cache=weight.get(defaultContext.DISK_WEIGHT);
  if (cache == null) {
    cache=new HashSet<ResourceType>();
    weight.put(defaultContext.DISK_WEIGHT,cache);
  }
  cache.add(ResourceType.DISK);
  cache=weight.get(defaultContext.PORT_WEIGHT);
  if (cache == null) {
    cache=new HashSet<ResourceType>();
    weight.put(defaultContext.PORT_WEIGHT,cache);
  }
  cache.add(ResourceType.NET);
  return weight;
}
