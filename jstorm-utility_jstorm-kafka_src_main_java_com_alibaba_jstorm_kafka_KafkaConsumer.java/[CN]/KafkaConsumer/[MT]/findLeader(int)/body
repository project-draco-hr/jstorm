{
  PartitionMetadata returnMetaData=null;
  int errors=0;
  int size=brokerList.size();
  Host brokerHost=brokerList.get(brokerIndex);
  try {
    if (consumer == null) {
      consumer=new SimpleConsumer(brokerHost.getHost(),brokerHost.getPort(),config.socketTimeoutMs,config.socketReceiveBufferBytes,config.clientId);
    }
  }
 catch (  Exception e) {
    LOG.warn(e.getMessage(),e);
    consumer=null;
  }
  int i=brokerIndex;
  loop:   while (i < size && errors < size + 1) {
    Host host=brokerList.get(i);
    i=(i + 1) % size;
    brokerIndex=i;
    try {
      if (consumer == null) {
        consumer=new SimpleConsumer(host.getHost(),host.getPort(),config.socketTimeoutMs,config.socketReceiveBufferBytes,config.clientId);
      }
      List<String> topics=Collections.singletonList(config.topic);
      TopicMetadataRequest req=new TopicMetadataRequest(topics);
      kafka.javaapi.TopicMetadataResponse resp=null;
      try {
        resp=consumer.send(req);
      }
 catch (      Exception e) {
        errors+=1;
        LOG.error("findLeader error, broker:" + host.toString() + ", will change to next broker index:"+ (i + 1) % size);
        if (consumer != null) {
          consumer.close();
          consumer=null;
        }
        continue;
      }
      List<TopicMetadata> metaData=resp.topicsMetadata();
      for (      TopicMetadata item : metaData) {
        for (        PartitionMetadata part : item.partitionsMetadata()) {
          if (part.partitionId() == partition) {
            returnMetaData=part;
            break loop;
          }
        }
      }
    }
 catch (    Exception e) {
      LOG.error("Error communicating with Broker:" + host.toString() + ", find Leader for partition:"+ partition);
    }
 finally {
      if (consumer != null) {
        consumer.close();
        consumer=null;
      }
    }
  }
  return returnMetaData;
}
