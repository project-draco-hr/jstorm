{
  org.apache.thrift7.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift7.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift7.protocol.TType.LIST) {
{
          org.apache.thrift7.protocol.TList _list37=iprot.readListBegin();
          this.supervisors=new ArrayList<SupervisorSummary>(_list37.size);
          for (int _i38=0; _i38 < _list37.size; ++_i38) {
            SupervisorSummary _elem39;
            _elem39=new SupervisorSummary();
            _elem39.read(iprot);
            this.supervisors.add(_elem39);
          }
          iprot.readListEnd();
        }
      }
 else {
        org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift7.protocol.TType.I32) {
    this.nimbus_uptime_secs=iprot.readI32();
    set_nimbus_uptime_secs_isSet(true);
  }
 else {
    org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == org.apache.thrift7.protocol.TType.LIST) {
{
  org.apache.thrift7.protocol.TList _list40=iprot.readListBegin();
  this.topologies=new ArrayList<TopologySummary>(_list40.size);
  for (int _i41=0; _i41 < _list40.size; ++_i41) {
    TopologySummary _elem42;
    _elem42=new TopologySummary();
    _elem42.read(iprot);
    this.topologies.add(_elem42);
  }
  iprot.readListEnd();
}
}
 else {
org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == org.apache.thrift7.protocol.TType.MAP) {
{
org.apache.thrift7.protocol.TMap _map43=iprot.readMapBegin();
this.groupToTopology=new HashMap<String,Map<String,Map<ThriftResourceType,Integer>>>(2 * _map43.size);
for (int _i44=0; _i44 < _map43.size; ++_i44) {
String _key45;
Map<String,Map<ThriftResourceType,Integer>> _val46;
_key45=iprot.readString();
{
  org.apache.thrift7.protocol.TMap _map47=iprot.readMapBegin();
  _val46=new HashMap<String,Map<ThriftResourceType,Integer>>(2 * _map47.size);
  for (int _i48=0; _i48 < _map47.size; ++_i48) {
    String _key49;
    Map<ThriftResourceType,Integer> _val50;
    _key49=iprot.readString();
{
      org.apache.thrift7.protocol.TMap _map51=iprot.readMapBegin();
      _val50=new HashMap<ThriftResourceType,Integer>(2 * _map51.size);
      for (int _i52=0; _i52 < _map51.size; ++_i52) {
        ThriftResourceType _key53;
        int _val54;
        _key53=ThriftResourceType.findByValue(iprot.readI32());
        _val54=iprot.readI32();
        _val50.put(_key53,_val54);
      }
      iprot.readMapEnd();
    }
    _val46.put(_key49,_val50);
  }
  iprot.readMapEnd();
}
this.groupToTopology.put(_key45,_val46);
}
iprot.readMapEnd();
}
}
 else {
org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == org.apache.thrift7.protocol.TType.MAP) {
{
org.apache.thrift7.protocol.TMap _map55=iprot.readMapBegin();
this.groupToResource=new HashMap<String,Map<ThriftResourceType,Integer>>(2 * _map55.size);
for (int _i56=0; _i56 < _map55.size; ++_i56) {
String _key57;
Map<ThriftResourceType,Integer> _val58;
_key57=iprot.readString();
{
org.apache.thrift7.protocol.TMap _map59=iprot.readMapBegin();
_val58=new HashMap<ThriftResourceType,Integer>(2 * _map59.size);
for (int _i60=0; _i60 < _map59.size; ++_i60) {
ThriftResourceType _key61;
int _val62;
_key61=ThriftResourceType.findByValue(iprot.readI32());
_val62=iprot.readI32();
_val58.put(_key61,_val62);
}
iprot.readMapEnd();
}
this.groupToResource.put(_key57,_val58);
}
iprot.readMapEnd();
}
}
 else {
org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == org.apache.thrift7.protocol.TType.MAP) {
{
org.apache.thrift7.protocol.TMap _map63=iprot.readMapBegin();
this.groupToUsedResource=new HashMap<String,Map<ThriftResourceType,Integer>>(2 * _map63.size);
for (int _i64=0; _i64 < _map63.size; ++_i64) {
String _key65;
Map<ThriftResourceType,Integer> _val66;
_key65=iprot.readString();
{
org.apache.thrift7.protocol.TMap _map67=iprot.readMapBegin();
_val66=new HashMap<ThriftResourceType,Integer>(2 * _map67.size);
for (int _i68=0; _i68 < _map67.size; ++_i68) {
ThriftResourceType _key69;
int _val70;
_key69=ThriftResourceType.findByValue(iprot.readI32());
_val70=iprot.readI32();
_val66.put(_key69,_val70);
}
iprot.readMapEnd();
}
this.groupToUsedResource.put(_key65,_val66);
}
iprot.readMapEnd();
}
}
 else {
org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 7:
if (field.type == org.apache.thrift7.protocol.TType.BOOL) {
this.isGroupModel=iprot.readBool();
set_isGroupModel_isSet(true);
}
 else {
org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
default :
org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
