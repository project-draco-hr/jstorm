{
  StormClusterState stormClusterState=data.getStormClusterState();
  TopologyInfo topologyInfo=new TopologyInfo();
  topologyInfo.set_id(topologyId);
  topologyInfo.set_name(base.getStormName());
  topologyInfo.set_uptime_secs(TimeUtils.time_delta(base.getLanchTimeSecs()));
  topologyInfo.set_status(base.getStatusString());
  Assignment assignment=stormClusterState.assignment_info(topologyId,null);
  if (assignment == null) {
    throw new TException("Failed to get StormBase from ZK of " + topologyId);
  }
  Map<Integer,String> taskInfo=Cluster.topology_task_info(stormClusterState,topologyId);
  Map<Integer,TaskSummary> tasks=NimbusUtils.mkTaskSummary(stormClusterState,assignment,taskInfo,topologyId);
  List<TaskSummary> taskSumms=new ArrayList<TaskSummary>();
  for (  Entry<Integer,TaskSummary> entry : tasks.entrySet()) {
    taskSumms.add(entry.getValue());
  }
  topologyInfo.set_tasks(taskSumms);
  List<WorkerSummary> workers=NimbusUtils.mkWorkerSummary(topologyId,assignment,tasks);
  topologyInfo.set_workers(workers);
  List<UserDefMetric> udm=new ArrayList<UserDefMetric>();
  udm=getUserDefMetrics(topologyId);
  topologyInfo.set_userDefMetric(udm);
  return topologyInfo;
}
