{
  LOG.info("Restart " + topologyname);
  try {
    checkTopologyActive(data,topologyname,false);
  }
 catch (  AlreadyAliveException e) {
    LOG.info("Fail to kill " + topologyname + " before restarting");
    return;
  }
catch (  Throwable e) {
    LOG.info("Failed to check whether topology is alive or not",e);
    throw new TException(e);
  }
  int counter=data.getSubmittedCount().incrementAndGet();
  String topologyId=topologyname + "-" + counter+ "-"+ TimeUtils.current_time_secs();
  String stormDistDir=null;
  String stormTmpDir=null;
  try {
    stormDistDir=StormConfig.masterStormdistRoot(conf,topologyId);
    stormTmpDir=StormConfig.masterStormTmpRoot(conf,topologyname);
    FileUtils.copyDirectory(new File(stormTmpDir),new File(stormDistDir));
    StormTopology topology=StormConfig.read_nimbus_topology_code(conf,topologyId);
    if (jsonConf != null) {
      Map serConf=StormConfig.read_nimbusTmp_topology_conf(conf,topologyname);
      Map<Object,Object> newSerConf=(Map<Object,Object>)JStormUtils.from_json(jsonConf);
      serConf.putAll(newSerConf);
      Map<Object,Object> stormConf=NimbusUtils.normalizeConf(conf,serConf,topology);
      File stormConfFile=new File(StormConfig.stormconf_path(stormDistDir));
      if (stormConfFile.exists())       stormConfFile.delete();
      FileUtils.writeByteArrayToFile(stormConfFile,Utils.serialize(stormConf));
      StormTopology normalizedTopology=NimbusUtils.normalizeTopology(stormConf,topology,true);
      File stormCodeFile=new File(StormConfig.stormcode_path(stormDistDir));
      if (stormCodeFile.exists())       stormCodeFile.delete();
      FileUtils.writeByteArrayToFile(stormCodeFile,Utils.serialize(normalizedTopology));
    }
    StormClusterState stormClusterState=data.getStormClusterState();
    setupZkTaskInfo(conf,topologyId,stormClusterState);
    LOG.info("Submit for " + topologyname + " with conf "+ jsonConf);
    makeAssignment(topologyname,topologyId,TopologyInitialStatus.ACTIVE);
  }
 catch (  FailedAssignTopologyException e) {
    StringBuilder sb=new StringBuilder();
    sb.append("Fail to sumbit topology, Root cause:");
    if (e.getMessage() == null) {
      sb.append("submit timeout");
    }
 else {
      sb.append(e.getMessage());
    }
    sb.append("\n\n");
    sb.append("topologyId:" + topologyId + "\n");
    LOG.error(sb.toString(),e);
    throw new TopologyAssignException(sb.toString());
  }
catch (  InvalidParameterException e) {
    StringBuilder sb=new StringBuilder();
    sb.append("Fail to sumbit topology ");
    sb.append(e.getMessage());
    sb.append(", cause:" + e.getCause());
    sb.append("\n\n");
    sb.append("topologyId:" + topologyId + "\n");
    LOG.error(sb.toString(),e);
    throw new InvalidParameterException(sb.toString());
  }
catch (  Throwable e) {
    StringBuilder sb=new StringBuilder();
    sb.append("Fail to sumbit topology ");
    sb.append(e.getMessage());
    sb.append(", cause:" + e.getCause());
    sb.append("\n\n");
    sb.append("topologyId:" + topologyId + "\n");
    LOG.error(sb.toString(),e);
    throw new TopologyAssignException(sb.toString());
  }
 finally {
    if (stormTmpDir != null) {
      try {
        File dir=new File(stormTmpDir);
        if (dir.exists())         FileUtils.deleteDirectory(dir);
      }
 catch (      Exception e) {
        LOG.error("Failed to delete stormTmpDir=" + stormTmpDir,e);
      }
    }
  }
}
