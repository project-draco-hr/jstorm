{
  try {
    StormClusterState stormClusterState=data.getStormClusterState();
    String supervisorId=null;
    SupervisorInfo supervisorInfo=null;
    Map<String,SupervisorInfo> supervisorInfos=Cluster.allSupervisorInfo(stormClusterState,null);
    for (    Entry<String,SupervisorInfo> entry : supervisorInfos.entrySet()) {
      SupervisorInfo info=entry.getValue();
      if (info.getHostName().equals(host)) {
        supervisorId=entry.getKey();
        supervisorInfo=info;
        break;
      }
    }
    if (supervisorId == null) {
      throw new TException("No supervisor of " + host);
    }
    Map<String,Assignment> assignments=new HashMap<String,Assignment>();
    Map<String,StormBase> bases=Cluster.topology_bases(stormClusterState);
    for (    Entry<String,StormBase> entry : bases.entrySet()) {
      String topologyId=entry.getKey();
      StormBase base=entry.getValue();
      Assignment assignment=stormClusterState.assignment_info(topologyId,null);
      if (assignment == null) {
        LOG.error("Failed to get assignment of " + topologyId);
        continue;
      }
      assignments.put(topologyId,assignment);
    }
    Map<Integer,WorkerSummary> portWorkerSummarys=new TreeMap<Integer,WorkerSummary>();
    for (    Entry<String,Assignment> entry : assignments.entrySet()) {
      String topologyId=entry.getKey();
      Assignment assignment=entry.getValue();
      Map<Integer,String> taskToComponent=Cluster.topology_task_info(stormClusterState,topologyId);
      Map<Integer,ResourceAssignment> taskToResource=assignment.getTaskToResource();
      for (      Entry<Integer,ResourceAssignment> resourceEntry : taskToResource.entrySet()) {
        Integer taskId=resourceEntry.getKey();
        ResourceAssignment resourceAssignment=resourceEntry.getValue();
        if (supervisorId.equals(resourceAssignment.getSupervisorId()) == false) {
          continue;
        }
        supervisorInfo.allocResource(resourceAssignment);
        Integer port=resourceAssignment.getPort();
        WorkerSummary workerSummary=portWorkerSummarys.get(port);
        if (workerSummary == null) {
          workerSummary=new WorkerSummary();
          workerSummary.set_port(port);
          workerSummary.set_topology(topologyId);
          workerSummary.set_tasks(new ArrayList<TaskSummary>());
          portWorkerSummarys.put(port,workerSummary);
        }
        String componentName=taskToComponent.get(taskId);
        int uptime=TimeUtils.time_delta(assignment.getTaskStartTimeSecs().get(taskId));
        List<TaskSummary> tasks=workerSummary.get_tasks();
        TaskSummary taskSummary=NimbusUtils.mkSimpleTaskSummary(resourceAssignment,taskId,componentName,host,uptime);
        tasks.add(taskSummary);
      }
    }
    List<WorkerSummary> wokersList=new ArrayList<WorkerSummary>();
    wokersList.addAll(portWorkerSummarys.values());
    SupervisorSummary supervisorSummary=NimbusUtils.mkSupervisorSummary(supervisorInfo,supervisorId);
    return new SupervisorWorkers(supervisorSummary,wokersList);
  }
 catch (  TException e) {
    LOG.info("Failed to get ClusterSummary ",e);
    throw e;
  }
catch (  Exception e) {
    LOG.info("Failed to get ClusterSummary ",e);
    throw new TException(e);
  }
}
