{
  System.out.println("!!!!!!!!!!Start client reboot test!!!!!!!!");
  final String req_msg=setupLargMsg();
  final IContext context=TransportFactory.makeContext(storm_conf);
  new Thread(new Runnable(){
    @Override public void run(){
      IConnection client=context.connect(null,"localhost",port);
      lock.lock();
      List<TaskMessage> list=new ArrayList<TaskMessage>();
      TaskMessage message=new TaskMessage(task,req_msg.getBytes());
      list.add(message);
      client.send(message);
      System.out.println("Send first");
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      client.close();
      IConnection client2=context.connect(null,"localhost",port);
      System.out.println("!!!!!!! restart client !!!!!!!!!!");
      client2.send(message);
      System.out.println("Send second");
      JStormUtils.sleepMs(1000);
      try {
        clientClose.await();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      client2.close();
      contextClose.signal();
      lock.unlock();
    }
  }
).start();
  IConnection server=initNettyServer();
  byte[] recv=(byte[])server.recv(task,0);
  System.out.println("Sever receive first");
  Assert.assertEquals(req_msg,new String(recv));
  Thread.sleep(1000);
  byte[] recv2=(byte[])server.recv(task,0);
  System.out.println("Sever receive second");
  Assert.assertEquals(req_msg,new String(recv2));
  lock.lock();
  clientClose.signal();
  server.close();
  contextClose.await();
  context.term();
  lock.unlock();
  System.out.println("!!!!!!!!!!End client reboot test!!!!!!!!");
}
