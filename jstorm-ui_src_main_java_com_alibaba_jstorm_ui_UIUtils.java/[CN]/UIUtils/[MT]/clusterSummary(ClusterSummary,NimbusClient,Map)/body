{
  List<SupervisorSummary> sups=summ.get_supervisors();
  int supSize=0;
  int totalMemSlots=0;
  int useMemSlots=0;
  int freeMemSlots=0;
  int totalPortSlots=0;
  int usePortSlots=0;
  int freePortSlots=0;
  if (sups != null) {
    supSize=sups.size();
    for (    SupervisorSummary ss : sups) {
      totalPortSlots+=ss.get_num_workers();
      usePortSlots+=ss.get_num_used_workers();
    }
    freeMemSlots=totalMemSlots - useMemSlots;
    freePortSlots=totalPortSlots - usePortSlots;
  }
  int totalTasks=0;
  List<TopologySummary> topos=summ.get_topologies();
  if (topos != null) {
    int topoSize=topos.size();
    for (int j=0; j < topoSize; j++) {
      totalTasks+=topos.get(j).get_num_tasks();
    }
  }
  String nimbustime=StatBuckets.prettyUptimeStr(summ.get_nimbus_uptime_secs());
  List<ClusterSumm> clusumms=new ArrayList<ClusterSumm>();
  ClusterSumm clusterSumm=new ClusterSumm();
  String master=client.getMasterHost();
  if (master.contains(":")) {
    String firstPart=master.substring(0,master.indexOf(":"));
    String lastPart=master.substring(master.indexOf(":"));
    clusterSumm.setNimbusHostname(NetWorkUtils.ip2Host(firstPart) + lastPart);
    clusterSumm.setNimbusIp(NetWorkUtils.host2Ip(firstPart));
  }
 else {
    clusterSumm.setNimbusHostname(master);
    clusterSumm.setNimbusIp(NetWorkUtils.host2Ip(master));
  }
  int port=ConfigExtension.getNimbusDeamonHttpserverPort(conf);
  clusterSumm.setNimbusLogPort(String.valueOf(port));
  clusterSumm.setNimbusUptime(nimbustime);
  clusterSumm.setSupervisorNum(String.valueOf(supSize));
  clusterSumm.setRunningTaskNum(String.valueOf(totalTasks));
  clusterSumm.setTotalPortSlotNum(String.valueOf(totalPortSlots));
  clusterSumm.setUsedPortSlotNum(String.valueOf(usePortSlots));
  clusterSumm.setFreePortSlotNum(String.valueOf(freePortSlots));
  clusterSumm.setVersion(summ.get_version());
  clusumms.add(clusterSumm);
  return clusumms;
}
