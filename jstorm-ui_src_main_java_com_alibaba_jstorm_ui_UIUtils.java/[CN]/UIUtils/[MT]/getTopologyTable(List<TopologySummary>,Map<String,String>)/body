{
  TableData table=new TableData();
  List<String> headers=table.getHeaders();
  List<Map<String,ColumnData>> lines=table.getLines();
  table.setName(UIDef.TOPOLOGY.toUpperCase());
  headers.add(UIDef.HEADER_TOPOLOGY_NAME);
  headers.add(UIDef.HEADER_TOPOLOGY_ID);
  headers.add(UIDef.HEADER_STATUS);
  headers.add(UIDef.HEADER_UPTIME);
  headers.add(UIDef.HEADER_WORKER_NUM);
  headers.add(UIDef.HEADER_TASK_NUM);
  headers.add(UIDef.HEADER_CONF);
  headers.add(UIDef.HEADER_ERROR);
  if (topologySummaries == null) {
    return table;
  }
  for (  TopologySummary topologySummary : topologySummaries) {
    Map<String,ColumnData> line=new HashMap<String,ColumnData>();
    lines.add(line);
    ColumnData topologyNameColumn=new ColumnData();
    LinkData linkData=new LinkData();
    topologyNameColumn.addLinkData(linkData);
    line.put(UIDef.HEADER_TOPOLOGY_NAME,topologyNameColumn);
    linkData.setUrl(UIDef.LINK_WINDOW_TABLE);
    linkData.setText(topologySummary.get_name());
    linkData.addParam(UIDef.CLUSTER,paramMap.get(UIDef.CLUSTER));
    linkData.addParam(UIDef.PAGE_TYPE,UIDef.PAGE_TYPE_TOPOLOGY);
    linkData.addParam(UIDef.TOPOLOGY,topologySummary.get_id());
    ColumnData topologyIdColumn=new ColumnData();
    topologyIdColumn.addText(topologySummary.get_id());
    line.put(UIDef.HEADER_TOPOLOGY_ID,topologyIdColumn);
    ColumnData statusColumn=new ColumnData();
    statusColumn.addText(topologySummary.get_status());
    line.put(UIDef.HEADER_STATUS,statusColumn);
    ColumnData uptimeColumn=new ColumnData();
    int uptime=topologySummary.get_uptime_secs();
    uptimeColumn.addText(StatBuckets.prettyUptimeStr(uptime));
    line.put(UIDef.HEADER_UPTIME,uptimeColumn);
    ColumnData workerNumColumn=new ColumnData();
    workerNumColumn.addText(String.valueOf(topologySummary.get_num_workers()));
    line.put(UIDef.HEADER_WORKER_NUM,workerNumColumn);
    ColumnData taskNumColumn=new ColumnData();
    taskNumColumn.addText(String.valueOf(topologySummary.get_num_tasks()));
    line.put(UIDef.HEADER_TASK_NUM,taskNumColumn);
    ColumnData confColumn=new ColumnData();
    LinkData confLink=new LinkData();
    confColumn.addLinkData(confLink);
    line.put(UIDef.HEADER_CONF,confColumn);
    confLink.setUrl(UIDef.LINK_TABLE_PAGE);
    confLink.setText(UIDef.HEADER_CONF.toLowerCase());
    confLink.addParam(UIDef.CLUSTER,paramMap.get(UIDef.CLUSTER));
    confLink.addParam(UIDef.PAGE_TYPE,UIDef.PAGE_TYPE_CONF);
    confLink.addParam(UIDef.CONF_TYPE,UIDef.CONF_TYPE_TOPOLOGY);
    confLink.addParam(UIDef.TOPOLOGY,topologySummary.get_id());
    ColumnData errorColumn=new ColumnData();
    String errorInfo=String.valueOf(topologySummary.get_error_info());
    errorColumn.addText(errorInfo);
    line.put(UIDef.HEADER_ERROR,errorColumn);
  }
  return table;
}
