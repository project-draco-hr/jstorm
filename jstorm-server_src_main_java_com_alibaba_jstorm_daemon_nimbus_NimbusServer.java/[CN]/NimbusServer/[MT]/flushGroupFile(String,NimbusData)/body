{
  data.getFlushGroupFileLock().lock();
  LOG.info("Begin to sync the group file: " + filePath);
  Map<String,Map<ThriftResourceType,Integer>> groupToResource=data.getGroupToResource();
  groupToResource.clear();
  try {
    org.ini4j.Config conf=new org.ini4j.Config();
    conf.setMultiSection(true);
    Ini ini=new Ini();
    ini.setConfig(conf);
    File file=new File(filePath);
    ini.load(file);
    List<Section> groupings=ini.getAll("group");
    for (    Section section : groupings) {
      String name=section.get("NAME");
      if (name == null)       continue;
      Map<ThriftResourceType,Integer> resource=groupToResource.get(name);
      if (resource == null) {
        resource=new HashMap<ThriftResourceType,Integer>();
        groupToResource.put(name,resource);
      }
      resource.put(ThriftResourceType.CPU,getResourceNum(section.get(ThriftResourceType.CPU.name())));
      resource.put(ThriftResourceType.MEM,getResourceNum(section.get(ThriftResourceType.MEM.name())));
      resource.put(ThriftResourceType.DISK,getResourceNum(section.get(ThriftResourceType.DISK.name())));
      resource.put(ThriftResourceType.NET,getResourceNum(section.get(ThriftResourceType.NET.name())));
    }
    cleanGroup(data);
    LOG.info("Successfully sync the group file: " + filePath);
  }
 catch (  Exception e) {
    LOG.error("Flush group file error " + filePath,e);
    throw e;
  }
 finally {
    data.getFlushGroupFileLock().unlock();
  }
}
