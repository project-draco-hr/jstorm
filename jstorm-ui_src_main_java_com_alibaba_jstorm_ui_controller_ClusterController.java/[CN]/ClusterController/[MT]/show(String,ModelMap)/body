{
  name=StringEscapeUtils.escapeHtml(name);
  long start=System.currentTimeMillis();
  NimbusClient client=null;
  try {
    client=NimbusClientManager.getNimbusClient(name);
    ClusterSummary clusterSummary=client.getClient().getClusterInfo();
    model.addAttribute("nimbus",UIUtils.getNimbusEntities(clusterSummary));
    model.addAttribute("topologies",UIUtils.getTopologyEntities(clusterSummary));
    model.addAttribute("supervisors",UIUtils.getSupervisorEntities(clusterSummary));
    model.addAttribute("zkServers",UIUtils.getZooKeeperEntities(name));
    List<MetricInfo> clusterMetrics=client.getClient().getMetrics(JStormMetrics.CLUSTER_METRIC_KEY,MetaType.TOPOLOGY.getT());
    UISummaryMetric clusterData=UIMetricUtils.getSummaryMetrics(clusterMetrics,AsmWindow.M1_WINDOW);
    model.addAttribute("clusterData",clusterData);
    model.addAttribute("clusterHead",UIMetricUtils.sortHead(clusterData,UISummaryMetric.HEAD));
    ClusterEntity ce=UIUtils.getClusterEntity(clusterSummary,name);
    model.addAttribute("cluster",ce);
    UIUtils.clustersCache.put(name,ce);
  }
 catch (  Exception e) {
    NimbusClientManager.removeClient(name);
    LOG.error(e.getMessage(),e);
    UIUtils.addErrorAttribute(model,e);
  }
  model.addAttribute("nimbusPort",UIUtils.getNimbusPort(name));
  model.addAttribute("supervisorPort",UIUtils.getSupervisorPort(name));
  model.addAttribute("clusterName",name);
  model.addAttribute("page","cluster");
  UIUtils.addTitleAttribute(model,"Cluster Summary");
  LOG.info("cluster page show cost:{}ms",System.currentTimeMillis() - start);
  return "cluster";
}
