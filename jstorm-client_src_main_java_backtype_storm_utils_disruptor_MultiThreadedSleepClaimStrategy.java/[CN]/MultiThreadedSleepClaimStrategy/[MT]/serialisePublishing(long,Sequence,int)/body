{
  int counter=RETRIES;
  while (sequence - cursor.get() > pendingPublication.length()) {
    if (--counter == 0) {
      Thread.yield();
      counter=RETRIES;
    }
  }
  long expectedSequence=sequence - batchSize;
  for (long pendingSequence=expectedSequence + 1; pendingSequence < sequence; pendingSequence++) {
    pendingPublication.lazySet((int)pendingSequence & pendingMask,pendingSequence);
  }
  pendingPublication.set((int)sequence & pendingMask,sequence);
  long cursorSequence=cursor.get();
  if (cursorSequence >= sequence) {
    return;
  }
  expectedSequence=Math.max(expectedSequence,cursorSequence);
  long nextSequence=expectedSequence + 1;
  while (cursor.compareAndSet(expectedSequence,nextSequence)) {
    expectedSequence=nextSequence;
    nextSequence++;
    if (pendingPublication.get((int)nextSequence & pendingMask) != nextSequence) {
      break;
    }
  }
}
