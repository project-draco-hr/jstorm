{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
        struct.topology=new TopologySummary();
        struct.topology.read(iprot);
        struct.set_topology_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list178=iprot.readListBegin();
      struct.components=new ArrayList<ComponentSummary>(_list178.size);
      ComponentSummary _elem179;
      for (int _i180=0; _i180 < _list178.size; ++_i180) {
        _elem179=new ComponentSummary();
        _elem179.read(iprot);
        struct.components.add(_elem179);
      }
      iprot.readListEnd();
    }
    struct.set_components_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list181=iprot.readListBegin();
  struct.tasks=new ArrayList<TaskSummary>(_list181.size);
  TaskSummary _elem182;
  for (int _i183=0; _i183 < _list181.size; ++_i183) {
    _elem182=new TaskSummary();
    _elem182.read(iprot);
    struct.tasks.add(_elem182);
  }
  iprot.readListEnd();
}
struct.set_tasks_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.metrics=new TopologyMetric();
struct.metrics.read(iprot);
struct.set_metrics_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
