{
  LOG.info("Begin to remove topology: " + topologyid);
  boolean locked=false;
  try {
    StormBase stormBase=data.getStormClusterState().storm_base(topologyid,null);
    if (stormBase == null) {
      LOG.info("Topology " + topologyid + " has been removed ");
      return null;
    }
    String topologyName=stormBase.getStormName();
    String group=stormBase.getGroup();
    data.getStormClusterState().remove_storm(topologyid);
    LOG.info("Successfully removed ZK items topology: " + topologyid);
    data.getFlushGroupFileLock().lock();
    locked=true;
    NimbusUtils.releaseGroupResource(data,topologyName,group);
    data.getFlushGroupFileLock().unlock();
    locked=false;
    LOG.info("Release " + topologyName + " resource from Group Pool");
  }
 catch (  Exception e) {
    LOG.warn("Failed to remove StormBase " + topologyid + " from ZK",e);
  }
 finally {
    if (locked == true) {
      data.getFlushGroupFileLock().unlock();
    }
  }
  return null;
}
