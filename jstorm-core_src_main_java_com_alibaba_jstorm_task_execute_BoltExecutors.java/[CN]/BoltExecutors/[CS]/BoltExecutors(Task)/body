{
  super(task);
  this.bolt=(IBolt)task.getTaskObj();
  this.tuple_start_times=new RotatingMap<Tuple,Long>(Acker.TIMEOUT_BUCKET_NUM);
  this.ackerNum=JStormUtils.parseInt(storm_conf.get(Config.TOPOLOGY_ACKER_EXECUTORS));
  IOutputCollector output_collector=new BoltCollector(task,tuple_start_times,message_timeout_secs);
  outputCollector=new OutputCollector(output_collector);
  taskHbTrigger.setBoltOutputCollector(outputCollector);
  String metricName=MetricUtils.taskMetricName(topologyId,componentId,taskId,MetricDef.EXECUTE_TIME,MetricType.HISTOGRAM);
  this.boltExeTimer=JStormMetrics.registerTaskMetric(metricName,new AsmHistogram());
  Object tickFrequence=storm_conf.get(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS);
  if (tickFrequence != null) {
    Integer frequence=JStormUtils.parseInt(tickFrequence);
    TickTupleTrigger tickTupleTrigger=new TickTupleTrigger(sysTopologyCtx,frequence,idStr + Constants.SYSTEM_TICK_STREAM_ID,exeQueue);
    tickTupleTrigger.register();
  }
  isSystemBolt=Common.isSystemComponent(componentId);
  if (isSystemBolt == false) {
    backpressureTrigger=new BackpressureTrigger(task,this,storm_conf,outputCollector);
    int backpressureCheckFrequence=ConfigExtension.getBackpressureCheckIntervl(storm_conf);
    BackpressureCheckTrigger backpressureCheckTrigger=new BackpressureCheckTrigger(30,backpressureCheckFrequence,idStr + " backpressure check trigger",backpressureTrigger);
    backpressureCheckTrigger.register(TimeUnit.MILLISECONDS);
  }
  LOG.info("Successfully create BoltExecutors " + idStr);
}
