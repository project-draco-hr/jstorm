{
  super(task);
  this.bolt=(IBolt)task.getTaskObj();
  this.tuple_start_times=new RotatingMap<Tuple,Long>(Acker.TIMEOUT_BUCKET_NUM);
  this.ackerNum=JStormUtils.parseInt(storm_conf.get(Config.TOPOLOGY_ACKER_EXECUTORS));
  BoltCollector output_collector=null;
  if (ConfigExtension.isTaskBatchTuple(storm_conf)) {
    output_collector=new BoltBatchCollector(task,tuple_start_times,message_timeout_secs);
  }
 else {
    output_collector=new BoltCollector(task,tuple_start_times,message_timeout_secs);
  }
  outputCollector=new OutputCollector(output_collector);
  taskHbTrigger.setBoltOutputCollector(output_collector);
  Object tickFrequence=storm_conf.get(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS);
  isSystemBolt=Common.isSystemComponent(componentId);
  if (tickFrequence != null && !isSystemBolt) {
    Integer frequence=JStormUtils.parseInt(tickFrequence);
    TickTupleTrigger tickTupleTrigger=new TickTupleTrigger(sysTopologyCtx,frequence,idStr + Constants.SYSTEM_TICK_STREAM_ID,controlQueue);
    tickTupleTrigger.register();
  }
  if (!isSystemBolt) {
    backpressureTrigger=new BackpressureTrigger(task,this,storm_conf,output_collector);
    int backpressureCheckFrequence=ConfigExtension.getBackpressureCheckIntervl(storm_conf);
    BackpressureCheckTrigger backpressureCheckTrigger=new BackpressureCheckTrigger(30,backpressureCheckFrequence,idStr + " backpressure check trigger",backpressureTrigger);
    backpressureCheckTrigger.register(TimeUnit.MILLISECONDS);
  }
  LOG.info("Successfully create BoltExecutors " + idStr);
}
