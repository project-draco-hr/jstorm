{
  List<Components> all=new ArrayList<Components>();
  all.addAll(scom);
  all.addAll(bcom);
  Long emitted=0l;
  Double sendTps=0.0;
  Double recvTps=0.0;
  Long acked=0l;
  Long failed=0l;
  for (  Components component : all) {
    emitted+=Long.valueOf(component.getEmitted());
    sendTps+=Double.valueOf(component.getSendTps());
    recvTps+=Double.valueOf(component.getRecvTps());
    acked+=Long.valueOf(component.getAcked());
    failed+=Long.valueOf(component.getFailed());
  }
  Double process=0.0;
  Long spoutNum=Long.valueOf(0);
  for (  Components component : scom) {
    if (component.getProcess() != null) {
      process+=(Double.valueOf(component.getProcess()) * Long.valueOf(component.getParallelism()));
    }
    spoutNum=Long.valueOf(component.getParallelism());
  }
  Double avergProcess=process / spoutNum;
  WinComponentStats topologyStats=new WinComponentStats();
  topologyStats.setWindow(window);
  topologyStats.setEmitted(JStormUtils.formatValue(emitted));
  topologyStats.setSendTps(JStormUtils.formatValue(sendTps));
  topologyStats.setRecvTps(JStormUtils.formatValue(recvTps));
  topologyStats.setAcked(JStormUtils.formatValue(acked));
  topologyStats.setFailed(JStormUtils.formatValue(failed));
  topologyStats.setProcess(JStormUtils.formatValue(avergProcess));
  List<WinComponentStats> tss=new ArrayList<WinComponentStats>();
  tss.add(topologyStats);
  return tss;
}
