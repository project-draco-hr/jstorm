{
  coos=new ArrayList<ComponentOutput>();
  cois=new ArrayList<ComponentInput>();
  List<Map<String,Long>> emittedList=new ArrayList<Map<String,Long>>();
  List<Map<String,Double>> sendTpsList=new ArrayList<Map<String,Double>>();
  List<Map<GlobalStreamId,Double>> recvTpsList=new ArrayList<Map<GlobalStreamId,Double>>();
  List<Map<GlobalStreamId,Long>> ackedList=new ArrayList<Map<GlobalStreamId,Long>>();
  List<Map<GlobalStreamId,Long>> failedList=new ArrayList<Map<GlobalStreamId,Long>>();
  List<Map<GlobalStreamId,Double>> processList=new ArrayList<Map<GlobalStreamId,Double>>();
  for (  TaskSummary taskSummary : taskSummaries) {
    TaskStats taskStats=taskSummary.get_stats();
    emittedList.add(taskStats.get_emitted().get(window));
    sendTpsList.add(taskStats.get_send_tps().get(window));
    recvTpsList.add(taskStats.get_recv_tps().get(window));
    ackedList.add(taskStats.get_acked().get(window));
    failedList.add(taskStats.get_failed().get(window));
    processList.add(taskStats.get_process_ms_avg().get(window));
  }
  Map<String,Long> emitted=JStormUtils.mergeMapList(emittedList);
  Map<String,Double> sendTps=JStormUtils.mergeMapList(sendTpsList);
  Map<GlobalStreamId,Double> recvTps=JStormUtils.mergeMapList(recvTpsList);
  Map<GlobalStreamId,Long> acked=JStormUtils.mergeMapList(ackedList);
  Map<GlobalStreamId,Long> failed=JStormUtils.mergeMapList(failedList);
  Map<GlobalStreamId,Double> processSum=JStormUtils.mergeMapList(processList);
  Map<GlobalStreamId,Double> process=new HashMap<GlobalStreamId,Double>();
  for (  Entry<GlobalStreamId,Double> entry : processSum.entrySet()) {
    GlobalStreamId streamId=entry.getKey();
    Double value=entry.getValue();
    if (value != null && processList.size() > 0) {
      process.put(streamId,value / processList.size());
    }
  }
  for (  Entry<String,Long> emittedEntry : emitted.entrySet()) {
    String outputStreamId=emittedEntry.getKey();
    Long emittedValue=emittedEntry.getValue();
    Double sendTpsValue=sendTps.get(outputStreamId);
    ComponentOutput co=new ComponentOutput();
    co.setValues(outputStreamId,emittedValue,sendTpsValue);
    coos.add(co);
  }
  for (  Entry<GlobalStreamId,Double> entry : process.entrySet()) {
    GlobalStreamId streamId=entry.getKey();
    Double processValue=entry.getValue();
    Double recvTpsValue=recvTps.get(streamId);
    Long ackedValue=acked.get(streamId);
    Long failedValue=failed.get(streamId);
    ComponentInput ci=new ComponentInput();
    ci.setValues(streamId,recvTpsValue,processValue,ackedValue,failedValue);
    cois.add(ci);
  }
  return;
}
