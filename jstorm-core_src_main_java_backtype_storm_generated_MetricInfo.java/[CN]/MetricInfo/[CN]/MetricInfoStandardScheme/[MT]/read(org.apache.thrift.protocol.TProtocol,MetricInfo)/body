{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map116=iprot.readMapBegin();
          struct.baseMetric=new HashMap<String,MetricWindow>(2 * _map116.size);
          String _key117;
          MetricWindow _val118;
          for (int _i119=0; _i119 < _map116.size; ++_i119) {
            _key117=iprot.readString();
            _val118=new MetricWindow();
            _val118.read(iprot);
            struct.baseMetric.put(_key117,_val118);
          }
          iprot.readMapEnd();
        }
        struct.set_baseMetric_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map120=iprot.readMapBegin();
      struct.inputMetric=new HashMap<String,Map<String,MetricWindow>>(2 * _map120.size);
      String _key121;
      Map<String,MetricWindow> _val122;
      for (int _i123=0; _i123 < _map120.size; ++_i123) {
        _key121=iprot.readString();
{
          org.apache.thrift.protocol.TMap _map124=iprot.readMapBegin();
          _val122=new HashMap<String,MetricWindow>(2 * _map124.size);
          String _key125;
          MetricWindow _val126;
          for (int _i127=0; _i127 < _map124.size; ++_i127) {
            _key125=iprot.readString();
            _val126=new MetricWindow();
            _val126.read(iprot);
            _val122.put(_key125,_val126);
          }
          iprot.readMapEnd();
        }
        struct.inputMetric.put(_key121,_val122);
      }
      iprot.readMapEnd();
    }
    struct.set_inputMetric_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map128=iprot.readMapBegin();
  struct.outputMetric=new HashMap<String,Map<String,MetricWindow>>(2 * _map128.size);
  String _key129;
  Map<String,MetricWindow> _val130;
  for (int _i131=0; _i131 < _map128.size; ++_i131) {
    _key129=iprot.readString();
{
      org.apache.thrift.protocol.TMap _map132=iprot.readMapBegin();
      _val130=new HashMap<String,MetricWindow>(2 * _map132.size);
      String _key133;
      MetricWindow _val134;
      for (int _i135=0; _i135 < _map132.size; ++_i135) {
        _key133=iprot.readString();
        _val134=new MetricWindow();
        _val134.read(iprot);
        _val130.put(_key133,_val134);
      }
      iprot.readMapEnd();
    }
    struct.outputMetric.put(_key129,_val130);
  }
  iprot.readMapEnd();
}
struct.set_outputMetric_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
