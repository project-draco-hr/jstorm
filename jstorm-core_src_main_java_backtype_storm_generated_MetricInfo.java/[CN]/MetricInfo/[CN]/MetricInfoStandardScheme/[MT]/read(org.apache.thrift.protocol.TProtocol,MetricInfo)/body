{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map116=iprot.readMapBegin();
          struct.metrics=new HashMap<String,Map<Integer,MetricSnapshot>>(2 * _map116.size);
          String _key117;
          Map<Integer,MetricSnapshot> _val118;
          for (int _i119=0; _i119 < _map116.size; ++_i119) {
            _key117=iprot.readString();
{
              org.apache.thrift.protocol.TMap _map120=iprot.readMapBegin();
              _val118=new HashMap<Integer,MetricSnapshot>(2 * _map120.size);
              int _key121;
              MetricSnapshot _val122;
              for (int _i123=0; _i123 < _map120.size; ++_i123) {
                _key121=iprot.readI32();
                _val122=new MetricSnapshot();
                _val122.read(iprot);
                _val118.put(_key121,_val122);
              }
              iprot.readMapEnd();
            }
            struct.metrics.put(_key117,_val118);
          }
          iprot.readMapEnd();
        }
        struct.set_metrics_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
default :
  org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
