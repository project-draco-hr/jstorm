{
  struct.validate();
  oprot.writeStructBegin(STRUCT_DESC);
  if (struct.nimbusMaster != null) {
    oprot.writeFieldBegin(NIMBUS_MASTER_FIELD_DESC);
    struct.nimbusMaster.write(oprot);
    oprot.writeFieldEnd();
  }
  if (struct.nimbusSlaves != null) {
    oprot.writeFieldBegin(NIMBUS_SLAVES_FIELD_DESC);
{
      oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,struct.nimbusSlaves.size()));
      for (      NimbusStat _iter77 : struct.nimbusSlaves) {
        _iter77.write(oprot);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
  }
  oprot.writeFieldBegin(SUPERVISOR_NUM_FIELD_DESC);
  oprot.writeI32(struct.supervisorNum);
  oprot.writeFieldEnd();
  oprot.writeFieldBegin(TOTAL_PORT_NUM_FIELD_DESC);
  oprot.writeI32(struct.totalPortNum);
  oprot.writeFieldEnd();
  oprot.writeFieldBegin(USED_PORT_NUM_FIELD_DESC);
  oprot.writeI32(struct.usedPortNum);
  oprot.writeFieldEnd();
  oprot.writeFieldBegin(FREE_PORT_NUM_FIELD_DESC);
  oprot.writeI32(struct.freePortNum);
  oprot.writeFieldEnd();
  if (struct.version != null) {
    oprot.writeFieldBegin(VERSION_FIELD_DESC);
    oprot.writeString(struct.version);
    oprot.writeFieldEnd();
  }
  oprot.writeFieldStop();
  oprot.writeStructEnd();
}
