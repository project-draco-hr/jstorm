{
  this.taskName=taskName;
  this.serializer=serializer;
  this.taskStatus=taskStatus;
  this.storm_conf=workerData.getConf();
  this.transferQueue=workerData.getTransferQueue();
  this.innerTaskTransfer=workerData.getInnerTaskTransfer();
  int queue_size=Utils.getInt(storm_conf.get(Config.TOPOLOGY_EXECUTOR_SEND_BUFFER_SIZE));
  WaitStrategy waitStrategy=(WaitStrategy)Utils.newInstance((String)storm_conf.get(Config.TOPOLOGY_DISRUPTOR_WAIT_STRATEGY));
  this.serializeQueue=DisruptorQueue.mkInstance(taskName,ProducerType.MULTI,queue_size,waitStrategy);
  this.serializeQueue.consumerStarted();
  String taskId=taskName.substring(taskName.indexOf(":") + 1);
  Metrics.registerQueue(taskName,MetricDef.SERIALIZE_QUEUE,serializeQueue,taskId,Metrics.MetricType.TASK);
  timer=Metrics.registerTimer(taskName,MetricDef.SERIALIZE_TIME,taskId,Metrics.MetricType.TASK);
  serializeThread=new AsyncLoopThread(new TransferRunnable());
  LOG.info("Successfully start TaskTransfer thread");
}
