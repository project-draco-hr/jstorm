{
  if (taskStreams == null || taskStreams.size() == 0) {
    return componentStreams;
  }
  if (componentStreams == null) {
    componentStreams=new HashMap<String,Map<String,MetricWindow>>();
  }
  for (  Entry<String,Map<String,MetricWindow>> entry : taskStreams.entrySet()) {
    String metricName=entry.getKey();
    Map<String,MetricWindow> streamMetricWindows=entry.getValue();
    if (streamMetricWindows == null) {
      continue;
    }
    Map<String,AtomicInteger> streamCounters=componentStreamParallel.get(metricName);
    if (streamCounters == null) {
      streamCounters=new HashMap<String,AtomicInteger>();
      componentStreamParallel.put(metricName,streamCounters);
    }
    Map<String,MetricWindow> componentStreamMetricWindows=componentStreams.get(metricName);
    if (componentStreamMetricWindows == null) {
      componentStreamMetricWindows=new HashMap<String,MetricWindow>();
      componentStreams.put(metricName,componentStreamMetricWindows);
    }
    for (    Entry<String,MetricWindow> streamEntry : streamMetricWindows.entrySet()) {
      String streamName=streamEntry.getKey();
      MetricWindow taskMetricWindow=streamEntry.getValue();
      MetricWindow componentMetricWindow=componentStreamMetricWindows.get(streamName);
      componentMetricWindow=MetricThrift.mergeMetricWindow(taskMetricWindow,componentMetricWindow);
      componentStreamMetricWindows.put(streamName,componentMetricWindow);
      AtomicInteger counter=streamCounters.get(streamName);
      if (counter == null) {
        counter=new AtomicInteger(0);
        streamCounters.put(streamName,counter);
      }
      counter.incrementAndGet();
    }
  }
  return componentStreams;
}
