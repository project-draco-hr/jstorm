{
  Map<Integer,MetricInfo> taskMetrics=topologyMetric.get_taskMetric();
  Map<Integer,String> taskToComponent=null;
  try {
    taskToComponent=Cluster.get_all_task_component(stormClusterState,topologyId,null);
  }
 catch (  Exception e) {
    LOG.error("Failed to get taskToComponent");
    return;
  }
  if (taskToComponent == null) {
    LOG.error("Failed to get taskToComponent");
    return;
  }
  Map<String,MetricInfo> componentMetrics=topologyMetric.get_componentMetric();
  if (componentMetrics == null) {
    componentMetrics=new HashMap<String,MetricInfo>();
    topologyMetric.set_componentMetric(componentMetrics);
  }
  Map<String,AtomicInteger> componentTaskParallel=new HashMap<String,AtomicInteger>();
  Map<String,Map<String,AtomicInteger>> componentStreamParallel=new HashMap<String,Map<String,AtomicInteger>>();
  for (  Entry<Integer,MetricInfo> entry : taskMetrics.entrySet()) {
    Integer taskId=entry.getKey();
    MetricInfo taskMetric=entry.getValue();
    String component=taskToComponent.get(taskId);
    if (component == null) {
      LOG.error("Failed to get component of task " + taskId);
      continue;
    }
    MetricInfo componentMetric=componentMetrics.get(component);
    componentMetric=mergeMetricInfo(taskMetric,componentMetric,MetricDef.MERGE_SUM_TAG);
    componentMetric=mergeMetricInfo(taskMetric,componentMetric,MetricDef.MERGE_AVG_TAG);
    Map<String,Map<String,MetricWindow>> input=mergeTaskStreams(componentMetric.get_inputMetric(),taskMetric.get_inputMetric(),componentStreamParallel);
    componentMetric.set_inputMetric(input);
    Map<String,Map<String,MetricWindow>> output=mergeTaskStreams(componentMetric.get_outputMetric(),taskMetric.get_outputMetric(),componentStreamParallel);
    componentMetric.set_outputMetric(output);
    componentMetrics.put(component,componentMetric);
    AtomicInteger counter=componentTaskParallel.get(component);
    if (counter == null) {
      counter=new AtomicInteger(0);
      componentTaskParallel.put(component,counter);
    }
    counter.incrementAndGet();
  }
  for (  Entry<String,MetricInfo> entry : componentMetrics.entrySet()) {
    String componentName=entry.getKey();
    MetricInfo metricInfo=entry.getValue();
    AtomicInteger counter=componentTaskParallel.get(componentName);
    for (    String tag : MetricDef.MERGE_AVG_TAG) {
      MetricWindow metricWindow=metricInfo.get_baseMetric().get(tag);
      avgMetricWindow(metricWindow,counter.get());
      avgStreams(metricInfo.get_inputMetric(),componentStreamParallel,tag);
      avgStreams(metricInfo.get_outputMetric(),componentStreamParallel,tag);
    }
  }
}
