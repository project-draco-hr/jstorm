{
  for (  String topology : JStormMetrics.SYS_TOPOLOGIES) {
    if (!topologyMetricContexts.containsKey(topology)) {
      LOG.info("adding {} to metric context.",topology);
      Map conf=new HashMap();
      if (topology.equals(JStormMetrics.CLUSTER_METRIC_KEY)) {
        conf.put(ConfigExtension.TOPOLOGY_METRIC_SAMPLE_RATE,1.0);
      }
      Set<ResourceWorkerSlot> workerSlot=Sets.newHashSet(new ResourceWorkerSlot());
      TopologyMetricContext metricContext=new TopologyMetricContext(topology,workerSlot,conf);
      topologyMetricContexts.putIfAbsent(topology,metricContext);
      syncMetaFromCache(topology,topologyMetricContexts.get(topology));
    }
  }
  Map<String,Assignment> assignMap;
  try {
    assignMap=Cluster.get_all_assignment(stormClusterState,null);
    for (    String topologyId : assignMap.keySet()) {
      if (!topologyMetricContexts.containsKey(topologyId)) {
        Assignment assignment=assignMap.get(topologyId);
        TopologyMetricContext metricContext=new TopologyMetricContext(assignment.getWorkers());
        metricContext.setTaskNum(NimbusUtils.getTopologyTaskNum(assignment));
        syncMetaFromCache(topologyId,metricContext);
        LOG.info("adding {} to metric context.",topologyId);
        topologyMetricContexts.put(topologyId,metricContext);
      }
    }
  }
 catch (  Exception e1) {
    LOG.warn("failed to get assignments");
    return;
  }
  List<String> removing=new ArrayList<>();
  for (  String topologyId : topologyMetricContexts.keySet()) {
    if (!JStormMetrics.SYS_TOPOLOGY_SET.contains(topologyId) && !assignMap.containsKey(topologyId)) {
      removing.add(topologyId);
    }
  }
  for (  String topologyId : removing) {
    LOG.info("removing topology:{}",topologyId);
    removeTopology(topologyId);
  }
}
