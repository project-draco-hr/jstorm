{
  rescaleIfNeeded();
  lockForRegularUsage();
  try {
    final double itemWeight=weight(timestamp - startTime);
    final WeightedSnapshot.WeightedSample sample=new WeightedSnapshot.WeightedSample(value,itemWeight);
    final double priority=itemWeight / ThreadLocalRandom.current().nextDouble();
    final long newCount=count.incrementAndGet();
    if (newCount <= size) {
      values.put(priority,sample);
    }
 else {
      Double first=values.firstKey();
      if (first < priority && values.putIfAbsent(priority,sample) == null) {
        while (values.remove(first) == null) {
          first=values.firstKey();
        }
      }
    }
  }
  finally {
    unlockForRegularUsage();
  }
}
