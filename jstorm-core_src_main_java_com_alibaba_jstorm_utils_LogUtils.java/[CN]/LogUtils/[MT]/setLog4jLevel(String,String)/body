{
  String logLevelUpper=(logLevel == null) ? "OFF" : logLevel.toUpperCase();
  try {
    Package log4jPackage=Package.getPackage(LOG4J_CLASSIC);
    if (log4jPackage == null) {
      LOG.warn("Log4j is not in the classpath!");
      return false;
    }
    Class<?> clz=Class.forName(LOG4J_CLASSIC_LOGGER);
    Object loggerObtained;
    if ((loggerName == null) || loggerName.trim().isEmpty()) {
      Method method=clz.getMethod("getRootLogger");
      loggerObtained=method.invoke(null);
      loggerName="ROOT";
    }
 else {
      Method method=clz.getMethod("getLogger",String.class);
      loggerObtained=method.invoke(null,loggerName);
    }
    if (loggerObtained == null) {
      LOG.warn("No logger for the name: {}",loggerName);
      return false;
    }
    Object logLevelObj=getFieldVaulue(LOG4J_CLASSIC_LEVEL,logLevelUpper);
    if (logLevelObj == null) {
      LOG.warn("No such log level: {}",logLevelUpper);
      return false;
    }
    Class<?>[] paramTypes={logLevelObj.getClass()};
    Object[] params={logLevelObj};
    Method method=clz.getMethod("setLevel",paramTypes);
    method.invoke(loggerObtained,params);
    LOG.info("Log4j level set to {} for the logger '{}'",logLevelUpper,loggerName);
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}
