{
  Map<Integer,LocalAssignment> newWorkers=JStormUtils.select_keys_pred(keepPorts,localAssignments);
  Map<Integer,String> newWorkerIds=new HashMap<>();
  for (  Entry<Integer,LocalAssignment> entry : newWorkers.entrySet()) {
    Integer port=entry.getKey();
    LocalAssignment assignment=entry.getValue();
    if (assignment != null && assignment.getTopologyId() != null && downloadFailedTopologyIds.contains(assignment.getTopologyId())) {
      LOG.info("Can't start this worker: " + port + " about the topology: "+ assignment.getTopologyId()+ ", due to the damaged binary !!");
      continue;
    }
    String workerId=UUID.randomUUID().toString();
    newWorkerIds.put(port,workerId);
    try {
      StormConfig.worker_pids_root(conf,workerId);
    }
 catch (    IOException e1) {
      LOG.error("Failed to create " + workerId + " localdir",e1);
      throw e1;
    }
    StringBuilder sb=new StringBuilder();
    sb.append("Launching worker with assiangment ");
    sb.append(assignment).append(" for the supervisor ").append(supervisorId).append(" on port ").append(port).append(" with id ").append(workerId);
    LOG.info(sb.toString());
    try {
      String clusterMode=StormConfig.cluster_mode(conf);
      if (clusterMode.equals("distributed")) {
        launchWorker(conf,sharedContext,assignment.getTopologyId(),supervisorId,port,workerId,assignment);
      }
 else       if (clusterMode.equals("local")) {
        launchWorker(conf,sharedContext,assignment.getTopologyId(),supervisorId,port,workerId,workerThreadPids);
      }
    }
 catch (    Exception e) {
      workerReportError.report(assignment.getTopologyId(),port,assignment.getTaskIds(),JStormUtils.getErrorInfo(e),ErrorConstants.CODE_WORKER_EX);
      String errorMsg="Failed to launchWorker workerId:" + workerId + ":"+ port;
      LOG.error(errorMsg,e);
      throw e;
    }
  }
  markAllNewWorkers(newWorkerIds);
}
