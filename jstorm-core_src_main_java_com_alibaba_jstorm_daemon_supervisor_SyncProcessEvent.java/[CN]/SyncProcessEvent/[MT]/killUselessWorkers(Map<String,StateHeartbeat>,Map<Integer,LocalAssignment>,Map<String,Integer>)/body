{
  Map<String,String> removed=new HashMap<>();
  Set<Integer> keepPorts=new HashSet<>();
  for (  Entry<String,StateHeartbeat> entry : localWorkerStats.entrySet()) {
    String workerId=entry.getKey();
    StateHeartbeat hbState=entry.getValue();
    if (workerIdToStartTimeAndPort.containsKey(workerId) && hbState.getState().equals(State.notStarted))     continue;
    if (hbState.getState().equals(State.valid)) {
      keepPorts.add(hbState.getHeartbeat().getPort());
    }
 else {
      if (hbState.getHeartbeat() != null) {
        removed.put(workerId,hbState.getHeartbeat().getTopologyId());
      }
 else {
        removed.put(workerId,null);
      }
      if (!killingWorkers.containsKey(workerId)) {
        StringBuilder sb=new StringBuilder();
        sb.append("Shutting down and clearing state for id ").append(workerId);
        sb.append(";State:").append(hbState);
        LOG.info(sb.toString());
      }
    }
  }
  shutWorker(conf,supervisorId,removed,workerThreadPids,cgroupManager,false,killingWorkers,taskCleanupTimeoutMap);
  Set<String> activeTopologies=new HashSet<>();
  if (killingWorkers.size() == 0) {
    for (    Entry<Integer,LocalAssignment> entry : localAssignments.entrySet()) {
      activeTopologies.add(entry.getValue().getTopologyId());
    }
    Set<String> obsoleteTopologys=new HashSet<>();
    for (    String topologyId : taskCleanupTimeoutMap.keySet()) {
      if (!activeTopologies.contains(topologyId)) {
        obsoleteTopologys.add(topologyId);
      }
    }
    for (    String topologyId : obsoleteTopologys) {
      taskCleanupTimeoutMap.remove(topologyId);
    }
  }
  for (  String removedWorkerId : removed.keySet()) {
    localWorkerStats.remove(removedWorkerId);
  }
  for (  Entry<String,Pair<Integer,Integer>> entry : workerIdToStartTimeAndPort.entrySet()) {
    String workerId=entry.getKey();
    StateHeartbeat hbState=localWorkerStats.get(workerId);
    if (hbState != null)     if (hbState.getState().equals(State.notStarted)) {
      keepPorts.add(entry.getValue().getSecond());
    }
  }
  return keepPorts;
}
