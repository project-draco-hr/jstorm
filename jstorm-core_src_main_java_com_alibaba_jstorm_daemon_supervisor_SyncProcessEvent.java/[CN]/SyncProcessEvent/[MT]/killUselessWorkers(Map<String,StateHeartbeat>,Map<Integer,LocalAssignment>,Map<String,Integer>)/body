{
  Map<String,String> removed=new HashMap<String,String>();
  Set<Integer> keepPorts=new HashSet<Integer>();
  for (  Entry<String,StateHeartbeat> entry : localWorkerStats.entrySet()) {
    String workerid=entry.getKey();
    StateHeartbeat hbstate=entry.getValue();
    if (workerIdToStartTimeAndPort.containsKey(workerid) && hbstate.getState().equals(State.notStarted))     continue;
    if (hbstate.getState().equals(State.valid)) {
      keepPorts.add(hbstate.getHeartbeat().getPort());
    }
 else {
      if (hbstate.getHeartbeat() != null) {
        removed.put(workerid,hbstate.getHeartbeat().getTopologyId());
      }
 else {
        removed.put(workerid,null);
      }
      if (killingWorkers.containsKey(workerid) == false) {
        StringBuilder sb=new StringBuilder();
        sb.append("Shutting down and clearing state for id ");
        sb.append(workerid);
        sb.append(";State:");
        sb.append(hbstate);
        LOG.info(sb.toString());
      }
    }
  }
  shutWorker(conf,supervisorId,removed,workerThreadPids,cgroupManager,false,killingWorkers,taskCleanupTimeoutMap);
  Set<String> activeTopologys=new HashSet<String>();
  if (killingWorkers.size() == 0) {
    for (    Entry<Integer,LocalAssignment> entry : localAssignments.entrySet()) {
      activeTopologys.add(entry.getValue().getTopologyId());
    }
    Set<String> obsoleteTopologys=new HashSet<String>();
    for (    String topologyId : taskCleanupTimeoutMap.keySet()) {
      if (activeTopologys.contains(topologyId) == false) {
        obsoleteTopologys.add(topologyId);
      }
    }
    for (    String topologyId : obsoleteTopologys) {
      taskCleanupTimeoutMap.remove(topologyId);
    }
  }
  for (  String removedWorkerId : removed.keySet()) {
    localWorkerStats.remove(removedWorkerId);
  }
  for (  Entry<String,Pair<Integer,Integer>> entry : workerIdToStartTimeAndPort.entrySet()) {
    String workerId=entry.getKey();
    StateHeartbeat hbstate=localWorkerStats.get(workerId);
    if (hbstate != null)     if (hbstate.getState().equals(State.notStarted)) {
      keepPorts.add(entry.getValue().getSecond());
    }
  }
  return keepPorts;
}
