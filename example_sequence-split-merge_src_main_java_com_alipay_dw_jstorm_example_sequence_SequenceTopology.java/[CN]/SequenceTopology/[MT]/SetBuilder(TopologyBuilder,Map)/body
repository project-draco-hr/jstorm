{
  int spout_Parallelism_hint=JStormUtils.parseInt(conf.get(TOPOLOGY_SPOUT_PARALLELISM_HINT),1);
  int bolt_Parallelism_hint=JStormUtils.parseInt(conf.get(TOPOLOGY_BOLT_PARALLELISM_HINT),2);
  builder.setSpout(SequenceTopologyDef.SEQUENCE_SPOUT_NAME,new SequenceSpout(),spout_Parallelism_hint);
  boolean isEnableSplit=JStormUtils.parseBoolean(conf.get("enable.split"),false);
  if (isEnableSplit == false) {
    BoltDeclarer boltDeclarer=builder.setBolt(SequenceTopologyDef.TOTAL_BOLT_NAME,new TotalCount(),bolt_Parallelism_hint);
    boltDeclarer.shuffleGrouping(SequenceTopologyDef.SEQUENCE_SPOUT_NAME).allGrouping(SequenceTopologyDef.SEQUENCE_SPOUT_NAME,SequenceTopologyDef.CONTROL_STREAM_ID).addConfiguration(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS,3);
  }
 else {
    builder.setBolt(SequenceTopologyDef.SPLIT_BOLT_NAME,new SplitRecord(),bolt_Parallelism_hint).localOrShuffleGrouping(SequenceTopologyDef.SEQUENCE_SPOUT_NAME);
    builder.setBolt(SequenceTopologyDef.TRADE_BOLT_NAME,new PairCount(),bolt_Parallelism_hint).shuffleGrouping(SequenceTopologyDef.SPLIT_BOLT_NAME,SequenceTopologyDef.TRADE_STREAM_ID);
    builder.setBolt(SequenceTopologyDef.CUSTOMER_BOLT_NAME,new PairCount(),bolt_Parallelism_hint).shuffleGrouping(SequenceTopologyDef.SPLIT_BOLT_NAME,SequenceTopologyDef.CUSTOMER_STREAM_ID);
    builder.setBolt(SequenceTopologyDef.MERGE_BOLT_NAME,new MergeRecord(),bolt_Parallelism_hint).fieldsGrouping(SequenceTopologyDef.TRADE_BOLT_NAME,new Fields("ID")).fieldsGrouping(SequenceTopologyDef.CUSTOMER_BOLT_NAME,new Fields("ID"));
    builder.setBolt(SequenceTopologyDef.TOTAL_BOLT_NAME,new TotalCount(),bolt_Parallelism_hint).noneGrouping(SequenceTopologyDef.MERGE_BOLT_NAME);
  }
  boolean kryoEnable=JStormUtils.parseBoolean(conf.get("kryo.enable"),false);
  if (kryoEnable == true) {
    System.out.println("Use Kryo ");
    boolean useJavaSer=JStormUtils.parseBoolean(conf.get("fall.back.on.java.serialization"),true);
    Config.setFallBackOnJavaSerialization(conf,useJavaSer);
    Config.registerSerialization(conf,TradeCustomer.class,TradeCustomerSerializer.class);
    Config.registerSerialization(conf,Pair.class,PairSerializer.class);
  }
  int ackerNum=JStormUtils.parseInt(conf.get(Config.TOPOLOGY_ACKER_EXECUTORS),1);
  Config.setNumAckers(conf,ackerNum);
  int workerNum=JStormUtils.parseInt(conf.get(Config.TOPOLOGY_WORKERS),20);
  conf.put(Config.TOPOLOGY_WORKERS,workerNum);
}
