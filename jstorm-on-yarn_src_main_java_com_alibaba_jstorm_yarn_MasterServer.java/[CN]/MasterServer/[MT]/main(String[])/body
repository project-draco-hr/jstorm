{
  LOG.info("Starting the AM!!!!");
  Options opts=new Options();
  opts.addOption("app_attempt_id",true,"App Attempt ID. Not to be used " + "unless for testing purposes");
  CommandLine cl=new GnuParser().parse(opts,args);
  ApplicationAttemptId appAttemptID;
  Map<String,String> envs=System.getenv();
  if (cl.hasOption("app_attempt_id")) {
    String appIdStr=cl.getOptionValue("app_attempt_id","");
    appAttemptID=ConverterUtils.toApplicationAttemptId(appIdStr);
  }
 else   if (envs.containsKey(ApplicationConstants.Environment.CONTAINER_ID.name())) {
    ContainerId containerId=ConverterUtils.toContainerId(envs.get(ApplicationConstants.Environment.CONTAINER_ID.name()));
    appAttemptID=containerId.getApplicationAttemptId();
    LOG.info("appAttemptID from env:" + appAttemptID.toString());
  }
 else {
    LOG.error("appAttemptID is not specified for storm master");
    throw new Exception("appAttemptID is not specified for storm master");
  }
  @SuppressWarnings("rawtypes") Map storm_conf=Config.readJStormConfig(null);
  Util.rmNulls(storm_conf);
  YarnConfiguration hadoopConf=new YarnConfiguration();
  final String host=InetAddress.getLocalHost().getHostName();
  storm_conf.put("nimbus.host",host);
  StormAMRMClient rmClient=new StormAMRMClient(appAttemptID,storm_conf,hadoopConf);
  rmClient.init(hadoopConf);
  rmClient.start();
  BlockingQueue<Container> launcherQueue=new LinkedBlockingQueue<Container>();
  MasterServer server=new MasterServer(storm_conf,rmClient);
  try {
    final int port=Utils.getInt(storm_conf.get(Config.MASTER_THRIFT_PORT));
    final String target=host + ":" + port;
    InetSocketAddress addr=NetUtils.createSocketAddr(target);
    RegisterApplicationMasterResponse resp=rmClient.registerApplicationMaster(addr.getHostName(),port,null);
    LOG.info("Got a registration response " + resp);
    LOG.info("Max Capability " + resp.getMaximumResourceCapability());
    rmClient.setMaxResource(resp.getMaximumResourceCapability());
    LOG.info("Starting HB thread");
    server.initAndStartHeartbeat(rmClient,launcherQueue,(Integer)storm_conf.get(Config.MASTER_HEARTBEAT_INTERVAL_MILLIS));
    LOG.info("Starting launcher");
    initAndStartLauncher(rmClient,launcherQueue);
    rmClient.startAllSupervisors();
    LOG.info("Starting Master Thrift Server");
    server.serve();
    LOG.info("StormAMRMClient::unregisterApplicationMaster");
    rmClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED,"AllDone",null);
  }
  finally {
    if (server.isServing()) {
      LOG.info("Stop Master Thrift Server");
      server.stop();
    }
    LOG.info("Stop RM client");
    rmClient.stop();
  }
  System.exit(0);
}
