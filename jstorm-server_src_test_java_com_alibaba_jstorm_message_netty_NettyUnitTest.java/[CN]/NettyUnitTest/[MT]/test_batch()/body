{
  System.out.println("!!!!!!!!!!Start batch message test!!!!!!!!");
  final int base=100000;
  final IContext context=TransportFactory.makeContext(storm_conf);
  final IConnection server=context.bind(null,port);
  WaitStrategy waitStrategy=(WaitStrategy)Utils.newInstance((String)storm_conf.get(Config.TOPOLOGY_DISRUPTOR_WAIT_STRATEGY));
  DisruptorQueue recvQueue=new DisruptorQueue(new SingleThreadedClaimStrategy(1024),waitStrategy);
  server.registerQueue(recvQueue);
  final Semaphore semp=new Semaphore(1);
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        semp.acquire();
      }
 catch (      InterruptedException e) {
      }
      IConnection client=null;
      client=context.connect(null,"localhost",port);
      List<TaskMessage> list=new ArrayList<TaskMessage>();
      for (int i=1; i < Short.MAX_VALUE; i++) {
        String req_msg=String.valueOf(i + base);
        TaskMessage message=new TaskMessage(i,req_msg.getBytes());
        list.add(message);
      }
      client.send(list);
      System.out.println("Finish Send ");
      JStormUtils.sleepMs(1000);
      client.close();
      semp.release();
    }
  }
).start();
  for (int i=1; i < Short.MAX_VALUE; i++) {
    TaskMessage message=server.recv(0);
    Assert.assertEquals(String.valueOf(i + base),new String(message.message()));
    if (i % 1000 == 0) {
      System.out.println("Receive " + message.task());
    }
  }
  System.out.println("Finish Receive ");
  server.close();
  semp.acquire();
  context.term();
  semp.release();
  System.out.println("!!!!!!!!!!End batch message test!!!!!!!!");
}
