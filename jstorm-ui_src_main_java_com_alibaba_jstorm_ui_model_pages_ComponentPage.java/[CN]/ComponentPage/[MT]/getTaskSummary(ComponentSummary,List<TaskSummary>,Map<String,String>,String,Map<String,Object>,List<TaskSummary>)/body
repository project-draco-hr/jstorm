{
  TableData table=new TableData();
  List<String> headers=table.getHeaders();
  List<Map<String,ColumnData>> lines=table.getLines();
  table.setName("Tasks");
  headers.add(UIDef.HEADER_TASK_ID);
  headers.add(UIDef.HEADER_STATUS);
  headers.add(UIDef.HEADER_UPTIME);
  headers.add(StringUtils.capitalize(UIDef.HOST));
  headers.add(StringUtils.capitalize(UIDef.PORT));
  headers.add(UIDef.HEADER_LOG);
  headers.add(UIDef.HEADER_ERROR);
  List<Integer> taskIds=componentSummary.get_task_ids();
  Set<Integer> taskIdSet=new HashSet<Integer>();
  taskIdSet.addAll(taskIds);
  long pos=JStormUtils.parseLong(paramMap.get(UIDef.POS),0);
  long index=0;
  Collections.sort(tasks);
  for (  TaskSummary task : tasks) {
    Integer taskId=task.get_task_id();
    if (taskIdSet.contains(taskId) == false) {
      continue;
    }
    if (index < pos) {
      index++;
      continue;
    }
 else     if (pos <= index && index < pos + UIUtils.ONE_TABLE_PAGE_SIZE) {
      showTasks.add(task);
      taskIdSet.remove(taskId);
      index++;
    }
 else {
      break;
    }
  }
  int logPort=ConfigExtension.getSupervisorDeamonHttpserverPort(nimbusConf);
  for (  TaskSummary task : showTasks) {
    Map<String,ColumnData> line=new HashMap<String,ColumnData>();
    lines.add(line);
    ColumnData taskIdColumn=new ColumnData();
    taskIdColumn.addText(String.valueOf(task.get_task_id()));
    line.put(UIDef.HEADER_TASK_ID,taskIdColumn);
    ColumnData statusColumn=new ColumnData();
    statusColumn.addText(task.get_status());
    line.put(UIDef.HEADER_STATUS,statusColumn);
    ColumnData uptimeColumn=new ColumnData();
    int uptime=task.get_uptime();
    uptimeColumn.addText(StatBuckets.prettyUptimeStr(uptime));
    line.put(UIDef.HEADER_UPTIME,uptimeColumn);
    ColumnData hostColumn=new ColumnData();
    LinkData linkData=new LinkData();
    hostColumn.addLinkData(linkData);
    line.put(StringUtils.capitalize(UIDef.HOST),hostColumn);
    linkData.setUrl(UIDef.LINK_TABLE_PAGE);
    linkData.setText(NetWorkUtils.ip2Host(task.get_host()));
    linkData.addParam(UIDef.CLUSTER,paramMap.get(UIDef.CLUSTER));
    linkData.addParam(UIDef.PAGE_TYPE,UIDef.PAGE_TYPE_SUPERVISOR);
    linkData.addParam(UIDef.HOST,task.get_host());
    ColumnData portColumn=new ColumnData();
    portColumn.addText(String.valueOf(task.get_port()));
    line.put(StringUtils.capitalize(UIDef.PORT),portColumn);
    ColumnData logColumn=new ColumnData();
    LinkData logLink=new LinkData();
    logColumn.addLinkData(logLink);
    line.put(UIDef.HEADER_LOG,logColumn);
    logLink.setUrl(UIDef.LINK_LOG);
    logLink.setText(UIDef.HEADER_LOG.toLowerCase());
    logLink.addParam(UIDef.CLUSTER,paramMap.get(UIDef.CLUSTER));
    logLink.addParam(UIDef.PAGE_TYPE,UIDef.PAGE_TYPE_LOG);
    logLink.addParam(UIDef.HOST,task.get_host());
    logLink.addParam(UIDef.TOPOLOGY,topologyId);
    logLink.addParam(UIDef.PORT,String.valueOf(task.get_port()));
    logLink.addParam(UIDef.LOG_SERVER_PORT,String.valueOf(logPort));
    ColumnData errColumn=new ColumnData();
    List<ErrorInfo> errList=task.get_errors();
    if (errList == null || errList.size() == 0) {
      errColumn.addText("");
    }
 else {
      for (      ErrorInfo err : errList) {
        errColumn.addText(err.get_error() + "\r\n");
      }
    }
    line.put(UIDef.HEADER_ERROR,errColumn);
  }
  return table;
}
