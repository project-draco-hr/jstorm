{
  List<TableData> tables=new ArrayList<TableData>();
  NimbusClient client=null;
  try {
    client=NimbusClientManager.getNimbusClient(paramMap);
    String jsonConf=client.getClient().getNimbusConf();
    Map<String,Object> nimbusConf=(Map<String,Object>)Utils.from_json(jsonConf);
    String topologyId=paramMap.get(UIDef.TOPOLOGY);
    if (topologyId == null) {
      throw new IllegalArgumentException("Not set topologyId");
    }
    String componentNam=paramMap.get(UIDef.COMPONENT);
    if (componentNam == null) {
      throw new IllegalArgumentException("Not set ComponentNam");
    }
    String windowStr=paramMap.get(UIDef.WINDOW);
    Integer window=StatBuckets.getTimeKey(windowStr);
    TopologyInfo topologyInfo=client.getClient().getTopologyInfo(topologyId);
    ComponentSummary componentSummary=null;
    List<ComponentSummary> componentSummaries=topologyInfo.get_components();
    for (    ComponentSummary item : componentSummaries) {
      if (item.get_name().equals(componentNam)) {
        componentSummary=item;
        break;
      }
    }
    if (componentSummary == null) {
      throw new IllegalArgumentException("No Component of " + componentNam);
    }
    List<ComponentSummary> myComponentSummaryList=new ArrayList<ComponentSummary>();
    myComponentSummaryList.add(componentSummary);
    TableData componentTable=UIUtils.getComponentTable(topologyInfo,myComponentSummaryList,topologyInfo.get_metrics().get_componentMetric(),paramMap,window);
    tables.add(componentTable);
    TableData inputTable=getInputComponentMetrics(topologyInfo,componentSummary,paramMap,window);
    if (inputTable != null) {
      tables.add(inputTable);
    }
    TableData outputTable=getOutputComponentMetrics(topologyInfo,componentSummary,paramMap,window);
    if (outputTable != null) {
      tables.add(outputTable);
    }
    List<TaskSummary> showTasks=new ArrayList<TaskSummary>();
    TableData taskSummaryTable=getTaskSummary(componentSummary,topologyInfo.get_tasks(),paramMap,topologyId,nimbusConf,showTasks);
    tables.add(taskSummaryTable);
    TableData taskMetric=getTaskMetrics(topologyInfo,showTasks,componentSummary,paramMap,window);
    tables.add(taskMetric);
    Output ret=new Output();
    ret.tables=tables;
    ret.rawData="";
    if (componentSummary.get_task_ids().size() > UIUtils.ONE_TABLE_PAGE_SIZE) {
      ret.pages=PageIndex.generatePageIndex(componentSummary.get_task_ids().size(),UIUtils.ONE_TABLE_PAGE_SIZE,UIDef.LINK_WINDOW_TABLE,paramMap);
    }
    return ret;
  }
 catch (  Exception e) {
    NimbusClientManager.removeClient(paramMap);
    LOG.error(e.getMessage(),e);
    return UIUtils.getErrorInfo(e);
  }
}
