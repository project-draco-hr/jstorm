{
  TableData table=new TableData();
  List<String> headers=table.getHeaders();
  List<Map<String,ColumnData>> lines=table.getLines();
  table.setName(componentSummary.get_name() + getWindowStr(window));
  headers.add(UIDef.HEADER_COMPONENT_NAME);
  headers.add(UIDef.HEADER_TOPOLOGY_NAME);
  headers.add(UIDef.HEADER_TASK_NUM);
  headers.add(UIDef.HEADER_COMPONENT_TYPE);
  Map<String,ColumnData> line=new HashMap<String,ColumnData>();
  lines.add(line);
  ColumnData nameColumn=new ColumnData();
  nameColumn.addText(componentSummary.get_name());
  line.put(UIDef.HEADER_COMPONENT_NAME,nameColumn);
  ColumnData topologyColumn=new ColumnData();
  LinkData linkData=new LinkData();
  topologyColumn.addLinkData(linkData);
  line.put(UIDef.HEADER_TOPOLOGY_NAME,topologyColumn);
  linkData.setUrl(UIDef.LINK_WINDOW_TABLE);
  linkData.setText(topologyInfo.get_topology().get_name());
  linkData.addParam(UIDef.CLUSTER,paramMap.get(UIDef.CLUSTER));
  linkData.addParam(UIDef.PAGE_TYPE,UIDef.PAGE_TYPE_TOPOLOGY);
  linkData.addParam(UIDef.TOPOLOGY,topologyInfo.get_topology().get_id());
  linkData.addParam(UIDef.WINDOW,StatBuckets.prettyUptimeStr(window));
  ColumnData taskNumColumn=new ColumnData();
  taskNumColumn.addText(String.valueOf(componentSummary.get_parallel()));
  line.put(UIDef.HEADER_TASK_NUM,taskNumColumn);
  ColumnData typeColumn=new ColumnData();
  typeColumn.addText(componentSummary.get_type());
  line.put(UIDef.HEADER_COMPONENT_TYPE,typeColumn);
  return table;
}
