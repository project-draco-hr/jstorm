{
  super(storm_conf,factory,scheduler,host,port,reconnector);
  batchQueue=new ConcurrentLinkedQueue<MessageBatch>();
  Metrics.register(address,MetricDef.NETTY_CLI_SYNC_BATCH_QUEUE,new Gauge<Integer>(){
    @Override public Integer getValue(){
      return batchQueue.size();
    }
  }
,null,Metrics.MetricType.WORKER);
  WaitStrategy waitStrategy=(WaitStrategy)Utils.newInstance((String)storm_conf.get(Config.TOPOLOGY_DISRUPTOR_WAIT_STRATEGY));
  disruptorQueue=new DisruptorQueue(name,ProducerType.MULTI,MAX_SEND_PENDING * 8,waitStrategy);
  Metrics.registerQueue(address,MetricDef.NETTY_CLI_SYNC_DISR_QUEUE,disruptorQueue,null,Metrics.MetricType.WORKER);
  Runnable trigger=new Runnable(){
    @Override public void run(){
      trigger();
    }
  }
;
  scheduler.scheduleWithFixedDelay(trigger,10,1,TimeUnit.SECONDS);
  ThreadFactory bossFactory=new NettyRenameThreadFactory(PREFIX + JStormServerUtils.getName(host,port) + "-boss");
  ThreadFactory workerFactory=new NettyRenameThreadFactory(PREFIX + JStormServerUtils.getName(host,port) + "-worker");
  clientChannelFactory=new NioClientSocketChannelFactory(Executors.newCachedThreadPool(bossFactory),Executors.newCachedThreadPool(workerFactory),1);
  start();
  LOG.info(this.toString());
}
