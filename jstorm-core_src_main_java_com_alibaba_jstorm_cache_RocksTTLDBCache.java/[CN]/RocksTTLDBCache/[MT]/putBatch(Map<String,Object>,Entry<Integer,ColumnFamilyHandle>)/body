{
  WriteOptions writeOpts=null;
  WriteBatch writeBatch=null;
  Set<byte[]> putKeys=new HashSet<byte[]>();
  try {
    writeOpts=new WriteOptions();
    writeBatch=new WriteBatch();
    for (    Entry<String,Object> entry : map.entrySet()) {
      String key=entry.getKey();
      Object value=entry.getValue();
      byte[] data=Utils.javaSerialize(value);
      if (StringUtils.isBlank(key) || data == null || data.length == 0) {
        continue;
      }
      byte[] keyByte=key.getBytes();
      writeBatch.put(putEntry.getValue(),keyByte,data);
      putKeys.add(keyByte);
    }
    ttlDB.write(writeOpts,writeBatch);
  }
 catch (  Exception e) {
    LOG.error("Failed to putBatch into DB, " + map.keySet(),e);
  }
 finally {
    if (writeOpts != null) {
      writeOpts.dispose();
    }
    if (writeBatch != null) {
      writeBatch.dispose();
    }
  }
  for (  Entry<Integer,ColumnFamilyHandle> entry : windowHandlers.entrySet()) {
    if (entry.getKey().equals(putEntry.getKey())) {
      continue;
    }
    for (    byte[] keyByte : putKeys) {
      try {
        ttlDB.remove(entry.getValue(),keyByte);
      }
 catch (      Exception e) {
        LOG.error("Failed to remove other's " + new String(keyByte));
      }
    }
  }
}
