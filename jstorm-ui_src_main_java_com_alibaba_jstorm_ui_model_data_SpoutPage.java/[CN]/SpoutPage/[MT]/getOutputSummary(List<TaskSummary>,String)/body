{
  coos=new ArrayList<SpoutOutput>();
  List<Map<String,Long>> emittedList=new ArrayList<Map<String,Long>>();
  List<Map<String,Double>> sendTpsList=new ArrayList<Map<String,Double>>();
  List<Map<GlobalStreamId,Double>> recvTpsList=new ArrayList<Map<GlobalStreamId,Double>>();
  List<Map<GlobalStreamId,Long>> ackedList=new ArrayList<Map<GlobalStreamId,Long>>();
  List<Map<GlobalStreamId,Long>> failedList=new ArrayList<Map<GlobalStreamId,Long>>();
  List<Map<GlobalStreamId,Double>> processList=new ArrayList<Map<GlobalStreamId,Double>>();
  for (  TaskSummary taskSummary : taskSummaries) {
    TaskStats taskStats=taskSummary.get_stats();
    emittedList.add(taskStats.get_emitted().get(window));
    sendTpsList.add(taskStats.get_send_tps().get(window));
    recvTpsList.add(taskStats.get_recv_tps().get(window));
    ackedList.add(taskStats.get_acked().get(window));
    failedList.add(taskStats.get_failed().get(window));
    processList.add(taskStats.get_process_ms_avg().get(window));
  }
  Map<String,Long> emitted=JStormUtils.mergeMapList(emittedList);
  Map<String,Double> sendTps=JStormUtils.mergeMapList(sendTpsList);
  Map<GlobalStreamId,Double> recvTps=JStormUtils.mergeMapList(recvTpsList);
  Map<GlobalStreamId,Long> acked=JStormUtils.mergeMapList(ackedList);
  Map<GlobalStreamId,Long> failed=JStormUtils.mergeMapList(failedList);
  Map<GlobalStreamId,Double> process=JStormUtils.mergeMapList(processList);
  for (  Entry<String,Long> emittedEntry : emitted.entrySet()) {
    String outputStreamId=emittedEntry.getKey();
    Long emittedValue=emittedEntry.getValue();
    Double sendTpsValue=sendTps.get(outputStreamId);
    GlobalStreamId streamId=null;
    for (    Entry<GlobalStreamId,Long> entry : acked.entrySet()) {
      String stream=entry.getKey().get_streamId();
      if (outputStreamId.equals(stream)) {
        streamId=entry.getKey();
        break;
      }
    }
    if (streamId == null) {
      for (      Entry<GlobalStreamId,Long> entry : failed.entrySet()) {
        String stream=entry.getKey().get_streamId();
        if (outputStreamId.equals(stream)) {
          streamId=entry.getKey();
          break;
        }
      }
    }
    Double processValue=process.get(streamId);
    Long ackedValue=acked.get(streamId);
    Long failedValue=failed.get(streamId);
    SpoutOutput co=new SpoutOutput();
    co.setValues(outputStreamId,emittedValue,sendTpsValue,processValue,ackedValue,failedValue);
    coos.add(co);
  }
  return;
}
