{
  List<NimbusStat> slaves=nimbusSummary.get_nimbus_slaves();
  if (slaves == null || slaves.size() == 0) {
    return null;
  }
  TableData slavesTable=new TableData();
  List<String> headers=slavesTable.getHeaders();
  List<Map<String,ColumnData>> lines=slavesTable.getLines();
  slavesTable.setName(TABLE_NAME_SLAVES);
  headers.add(UIDef.HOST.toUpperCase());
  headers.add(UIDef.HEADER_UPTIME);
  headers.add(UIDef.HEADER_LOGS);
  for (  NimbusStat slave : slaves) {
    Map<String,ColumnData> line=new HashMap<String,ColumnData>();
    lines.add(line);
    ColumnData hostColumn=new ColumnData();
    String ipPort=slave.get_host();
    String hostPort=UIUtils.getHostIp(ipPort);
    hostColumn.addText(hostPort);
    line.put(UIDef.HOST.toUpperCase(),hostColumn);
    ColumnData uptimeColumn=new ColumnData();
    String uptime=slave.get_uptime_secs();
    if (uptime == null) {
      uptimeColumn.addText(StatBuckets.prettyUptimeStr(0));
    }
 else {
      uptimeColumn.addText(StatBuckets.prettyUptimeStr(Integer.valueOf(uptime)));
    }
    line.put(UIDef.HEADER_UPTIME,uptimeColumn);
    ColumnData logsColumn=new ColumnData();
    LinkData logsLink=new LinkData();
    logsColumn.addLinkData(logsLink);
    line.put(UIDef.HEADER_LOGS,logsColumn);
    logsLink.setUrl(UIDef.LINK_TABLE_PAGE);
    logsLink.setText(UIDef.HEADER_LOGS.toLowerCase());
    logsLink.addParam(UIDef.CLUSTER,paramMap.get(UIDef.CLUSTER));
    logsLink.addParam(UIDef.PAGE_TYPE,UIDef.PAGE_TYPE_LISTLOG);
    logsLink.addParam(UIDef.HOST,UIUtils.getHost(ipPort));
    logsLink.addParam(UIDef.PORT,String.valueOf(ConfigExtension.getNimbusDeamonHttpserverPort(nimbusConf)));
    logsLink.addParam(UIDef.DIR,".");
  }
  return slavesTable;
}
