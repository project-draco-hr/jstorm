{
  TableData nimbusMaster=new TableData();
  nimbusMaster.setName(TABLE_NAME_MASTER);
  List<String> headers=nimbusMaster.getHeaders();
  List<Map<String,ColumnData>> lines=nimbusMaster.getLines();
  headers.add(UIDef.HOST.toUpperCase());
  headers.add(UIDef.HEADER_UPTIME);
  headers.add(UIDef.HEADER_SUPERVISOR);
  headers.add(UIDef.HEADER_TOTAL_PORT);
  headers.add(UIDef.HEADER_USED_PORT);
  headers.add(UIDef.HEADER_FREE_PORT);
  headers.add(UIDef.HEADER_VERSION);
  headers.add(UIDef.HEADER_CONF);
  headers.add(UIDef.HEADER_LOGS);
  Map<String,ColumnData> line=new HashMap<String,ColumnData>();
  lines.add(line);
  ColumnData nimbusMasterColumn=new ColumnData();
  String ipPort=nimbusSummary.get_nimbus_master().get_host();
  String hostPort=UIUtils.getHostIp(ipPort);
  nimbusMasterColumn.addText(hostPort);
  line.put(UIDef.HOST.toUpperCase(),nimbusMasterColumn);
  ColumnData uptimeColumn=new ColumnData();
  String uptime=nimbusSummary.get_nimbus_master().get_uptime_secs();
  if (uptime == null) {
    uptimeColumn.addText(StatBuckets.prettyUptimeStr(0));
  }
 else {
    uptimeColumn.addText(StatBuckets.prettyUptimeStr(Integer.valueOf(uptime)));
  }
  line.put(UIDef.HEADER_UPTIME,uptimeColumn);
  ColumnData supervisorColumn=new ColumnData();
  supervisorColumn.addText(String.valueOf(nimbusSummary.get_supervisor_num()));
  line.put(UIDef.HEADER_SUPERVISOR,supervisorColumn);
  ColumnData totalPortColumn=new ColumnData();
  totalPortColumn.addText(String.valueOf(nimbusSummary.get_total_port_num()));
  line.put(UIDef.HEADER_TOTAL_PORT,totalPortColumn);
  ColumnData usedPortColumn=new ColumnData();
  usedPortColumn.addText(String.valueOf(nimbusSummary.get_used_port_num()));
  line.put(UIDef.HEADER_USED_PORT,usedPortColumn);
  ColumnData freePortColumn=new ColumnData();
  freePortColumn.addText(String.valueOf(nimbusSummary.get_free_port_num()));
  line.put(UIDef.HEADER_FREE_PORT,freePortColumn);
  ColumnData versionColumn=new ColumnData();
  versionColumn.addText(nimbusSummary.get_version());
  line.put(UIDef.HEADER_VERSION,versionColumn);
  ColumnData confColumn=new ColumnData();
  LinkData confLink=new LinkData();
  confColumn.addLinkData(confLink);
  line.put(UIDef.HEADER_CONF,confColumn);
  confLink.setUrl(UIDef.LINK_TABLE_PAGE);
  confLink.setText(UIDef.HEADER_CONF.toLowerCase());
  confLink.addParam(UIDef.CLUSTER,paramMap.get(UIDef.CLUSTER));
  confLink.addParam(UIDef.PAGE_TYPE,UIDef.PAGE_TYPE_CONF);
  confLink.addParam(UIDef.CONF_TYPE,UIDef.CONF_TYPE_NIMBUS);
  ColumnData logsColumn=new ColumnData();
  LinkData logsLink=new LinkData();
  logsColumn.addLinkData(logsLink);
  line.put(UIDef.HEADER_LOGS,logsColumn);
  logsLink.setUrl(UIDef.LINK_TABLE_PAGE);
  logsLink.setText(UIDef.HEADER_LOGS.toLowerCase());
  logsLink.addParam(UIDef.CLUSTER,paramMap.get(UIDef.CLUSTER));
  logsLink.addParam(UIDef.PAGE_TYPE,UIDef.PAGE_TYPE_LISTLOG);
  logsLink.addParam(UIDef.HOST,UIUtils.getHost(ipPort));
  logsLink.addParam(UIDef.PORT,String.valueOf(ConfigExtension.getNimbusDeamonHttpserverPort(nimbusConf)));
  logsLink.addParam(UIDef.DIR,".");
  return nimbusMaster;
}
