{
  List componentSers=new ArrayList();
  Set<String> cids=ThriftTopologyUtils.getComponentIds(topology);
  for (Iterator it=cids.iterator(); it.hasNext(); ) {
    String componentId=(String)it.next();
    ComponentCommon common=ThriftTopologyUtils.getComponentCommon(topology,componentId);
    String json=common.get_json_conf();
    if (json != null) {
      Map mtmp=(Map)JStormUtils.from_json(json);
      Object ltmp=mtmp.get(Config.TOPOLOGY_KRYO_REGISTER);
      if (ltmp != null) {
        LOG.info("topology:" + stormConf.get(Config.TOPOLOGY_NAME) + ", componentId:"+ componentId+ ", TOPOLOGY_KRYO_REGISTER"+ ltmp.getClass().getName());
        if (ltmp instanceof List) {
          for (          Object o : (List)ltmp) {
            LOG.info("TOPOLOGY_KRYO_REGISTER:entry:" + o);
            componentSers.add(o);
          }
        }
 else {
          componentSers.add(ltmp);
        }
      }
    }
  }
  Map totalConf=new HashMap();
  totalConf.putAll(conf);
  totalConf.putAll(stormConf);
  Object o=totalConf.get(Config.TOPOLOGY_KRYO_REGISTER);
  List baseSers=null;
  if (o != null) {
    LOG.info("topology:" + stormConf.get(Config.TOPOLOGY_NAME) + ", TOPOLOGY_KRYO_REGISTER"+ o.getClass().getName());
    baseSers=(List)o;
  }
  Map map=new TreeMap();
  map.putAll(mapifySerializations(baseSers));
  map.putAll(mapifySerializations(componentSers));
  Map rtn=new HashMap();
  rtn.putAll(stormConf);
  rtn.put(Config.TOPOLOGY_KRYO_REGISTER,map);
  rtn.put(Config.TOPOLOGY_ACKERS,totalConf.get(Config.TOPOLOGY_ACKERS));
  return rtn;
}
