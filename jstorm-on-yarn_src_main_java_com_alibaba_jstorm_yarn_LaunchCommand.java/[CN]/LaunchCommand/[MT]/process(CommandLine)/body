{
  String config_file=null;
  List remaining_args=cl.getArgList();
  if (remaining_args != null && !remaining_args.isEmpty()) {
    config_file=(String)remaining_args.get(0);
  }
  Map stormConf=Config.readJStormConfig();
  LOG.info("initial storm conf:" + stormConf);
  String appName=cl.getOptionValue("appname","JStorm-on-Yarn");
  String queue=cl.getOptionValue("queue","default");
  String storm_zip_location=cl.getOptionValue("jstormZip");
  Integer amSize=(Integer)stormConf.get(Config.MASTER_SIZE_MB);
  System.out.println("amSize: " + amSize);
  JStormOnYarn jstorm=null;
  try {
    jstorm=JStormOnYarn.launchApplication(appName,queue,amSize,stormConf,storm_zip_location);
    LOG.debug("Submitted application's ID:" + jstorm.getAppId());
    String storm_yaml_output=cl.getOptionValue("jstormConfOutput");
    if (storm_yaml_output != null && storm_yaml_output.length() > 0) {
      StormMaster.Client client=jstorm.getClient();
      if (client != null)       StormMasterCommand.downloadStormYaml(client,storm_yaml_output);
 else       LOG.warn("No storm.yaml is downloaded");
    }
    String output=cl.getOptionValue("output");
    if (output == null)     System.out.println(jstorm.getAppId());
 else {
      PrintStream os=new PrintStream(output);
      os.println(jstorm.getAppId());
      os.flush();
      os.close();
    }
  }
  finally {
    if (jstorm != null) {
      jstorm.stop();
    }
  }
}
