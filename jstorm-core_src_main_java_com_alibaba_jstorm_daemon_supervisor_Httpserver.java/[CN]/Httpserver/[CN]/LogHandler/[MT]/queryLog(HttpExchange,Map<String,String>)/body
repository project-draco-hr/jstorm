{
  String fileParam=paramMap.get(HttpserverUtils.HTTPSERVER_LOGVIEW_PARAM_LOGFILE);
  String _pageSize=paramMap.get(HttpserverUtils.HTTPSERVER_LOGVIEW_PAGE_SIZE);
  if (StringUtils.isBlank(fileParam)) {
    handlFailure(t,"Bad Request, Params Error, no log file name.");
    return null;
  }
  int pageSize=this.pageSize;
  if (!StringUtils.isBlank(_pageSize)) {
    pageSize=JStormUtils.parseInt(_pageSize,this.pageSize);
  }
  String logFile=Joiner.on(File.separator).join(logDir,fileParam);
  accessCheck(logFile);
  FileChannel fc=null;
  MappedByteBuffer fout;
  long fileSize;
  byte[] ret;
  try {
    fc=new RandomAccessFile(logFile,"r").getChannel();
    fileSize=fc.size();
    long position=fileSize - pageSize;
    try {
      String posStr=paramMap.get(HttpserverUtils.HTTPSERVER_LOGVIEW_PARAM_POS);
      if (!StringUtils.isBlank(posStr)) {
        position=Long.valueOf(posStr);
      }
    }
 catch (    Exception e) {
      LOG.warn("Invalide position " + position);
    }
    if (position < 0) {
      position=0L;
    }
    long size=Math.min(fileSize - position,pageSize);
    LOG.info("logview " + logFile + ", position="+ position+ ", size="+ size);
    fout=fc.map(FileChannel.MapMode.READ_ONLY,position,size);
    ret=new byte[(int)size];
    fout.get(ret);
    String str=new String(ret,ConfigExtension.getLogViewEncoding(conf));
    return new Pair<>(fileSize,str.getBytes());
  }
 catch (  FileNotFoundException e) {
    LOG.warn(e.getMessage(),e);
    handlFailure(t,"Bad Request, Failed to find " + fileParam);
    return null;
  }
catch (  IOException e) {
    LOG.warn(e.getMessage(),e);
    handlFailure(t,"Bad Request, Failed to open " + fileParam);
    return null;
  }
 finally {
    if (fc != null) {
      IOUtils.closeQuietly(fc);
    }
  }
}
