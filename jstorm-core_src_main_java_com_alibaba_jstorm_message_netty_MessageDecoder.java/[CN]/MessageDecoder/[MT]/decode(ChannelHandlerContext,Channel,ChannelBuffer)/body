{
  long available=buf.readableBytes();
  if (available < 6) {
    return null;
  }
  long startTime=0L;
  if (isServer && enableNettyMetrics) {
    startTime=msgDecodeTimer.getTime();
  }
  try {
    buf.markReaderIndex();
    short code=buf.readShort();
    available-=2;
    ControlMessage ctrl_msg=ControlMessage.mkMessage(code);
    if (ctrl_msg != null) {
      if (available < 12) {
        buf.resetReaderIndex();
        return null;
      }
      long timeStamp=buf.readLong();
      int clientPort=buf.readInt();
      available-=12;
      if (ctrl_msg == ControlMessage.EOB_MESSAGE) {
        long interval=System.currentTimeMillis() - timeStamp;
        if (interval < 0)         interval=0;
        if (enableNettyMetrics) {
          AsmHistogram netTransTime=getTransmitHistogram(channel,clientPort);
          if (netTransTime != null) {
            netTransTime.update(interval * TimeUtils.NS_PER_US);
          }
        }
        networkWorkerTransmitTime.update(interval * TimeUtils.NS_PER_US);
      }
      nettyServerRecvSpeed.update(ControlMessage.encodeLength());
      return ctrl_msg;
    }
    short type=code;
    short task=buf.readShort();
    available-=2;
    if (available < 4) {
      buf.resetReaderIndex();
      return null;
    }
    int length=buf.readInt();
    if (length <= 0) {
      LOG.info("Receive one message whose TaskMessage's message length is {}",length);
      return new TaskMessage(task,null);
    }
    available-=4;
    if (available < length) {
      buf.resetReaderIndex();
      return null;
    }
    ChannelBuffer payload=buf.readBytes(length);
    byte[] rawBytes=payload.array();
    TaskMessage ret=new TaskMessage(type,task,rawBytes);
    nettyServerRecvSpeed.update(rawBytes.length + 8);
    return ret;
  }
  finally {
    if (isServer && enableNettyMetrics && msgDecodeTimer != null) {
      msgDecodeTimer.updateTime(startTime);
    }
  }
}
