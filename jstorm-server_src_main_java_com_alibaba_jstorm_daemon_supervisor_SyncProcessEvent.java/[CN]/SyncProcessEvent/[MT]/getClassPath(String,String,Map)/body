{
  String classpath=JStormUtils.current_classpath();
  String[] classpathes=classpath.split(":");
  Set<String> classSet=new HashSet<String>();
  for (  String classJar : classpathes) {
    classSet.add(classJar);
  }
  if (stormHome != null) {
    List<String> stormHomeFiles=PathUtils.read_dir_contents(stormHome);
    for (    String file : stormHomeFiles) {
      if (file.endsWith(".jar")) {
        classSet.add(stormHome + File.separator + file);
      }
    }
    List<String> stormLibFiles=PathUtils.read_dir_contents(stormHome + File.separator + "lib");
    for (    String file : stormLibFiles) {
      if (file.endsWith(".jar")) {
        classSet.add(stormHome + File.separator + "lib"+ File.separator+ file);
      }
    }
  }
  String filterJarKeyword=null;
  String transport_plugin_klassName=(String)totalConf.get(Config.STORM_MESSAGING_TRANSPORT);
  if (transport_plugin_klassName.equals(MQContext.class.getCanonicalName())) {
    filterJarKeyword="jeromq";
  }
 else   if (transport_plugin_klassName.equals("com.alibaba.jstorm.message.jeroMq.JMQContext")) {
    filterJarKeyword="jzmq";
  }
  StringBuilder sb=new StringBuilder();
  if (filterJarKeyword != null) {
    for (    String jar : classSet) {
      if (jar.contains(filterJarKeyword)) {
        continue;
      }
      sb.append(jar + ":");
    }
  }
 else {
    for (    String jar : classSet) {
      sb.append(jar + ":");
    }
  }
  if (ConfigExtension.isEnableTopologyClassLoader(totalConf)) {
    return sb.toString().substring(0,sb.length() - 1);
  }
 else {
    sb.append(stormjar);
    return sb.toString();
  }
}
