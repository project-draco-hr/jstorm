{
  Set<String> removed=new HashSet<String>();
  Set<Integer> keepPorts=new HashSet<Integer>();
  for (  Entry<String,StateHeartbeat> entry : localWorkerStats.entrySet()) {
    String workerid=entry.getKey();
    StateHeartbeat hbstate=entry.getValue();
    if (hbstate.getState().equals(State.valid)) {
      keepPorts.add(hbstate.getHeartbeat().getPort());
    }
 else {
      removed.add(workerid);
      StringBuilder sb=new StringBuilder();
      sb.append("Shutting down and clearing state for id ");
      sb.append(workerid);
      sb.append(";State:");
      sb.append(hbstate.getState());
      sb.append(";Heartbeat");
      sb.append(hbstate.getHeartbeat());
      LOG.info(sb);
      try {
        shutWorker(conf,supervisorId,workerid,workerThreadPids);
        if (cgroupManager != null) {
          cgroupManager.shutDownWorker(workerid);
        }
      }
 catch (      IOException e) {
        String errMsg="Failed to shutdown worker workId:" + workerid + ",supervisorId: "+ supervisorId+ ",workerThreadPids:"+ workerThreadPids;
        LOG.error(errMsg,e);
      }
    }
  }
  for (  String removedWorkerId : removed) {
    localWorkerStats.remove(removedWorkerId);
  }
  return keepPorts;
}
