{
  Map<String,String> removed=new HashMap<String,String>();
  Set<Integer> keepPorts=new HashSet<Integer>();
  for (  Entry<String,StateHeartbeat> entry : localWorkerStats.entrySet()) {
    String workerid=entry.getKey();
    StateHeartbeat hbstate=entry.getValue();
    if (hbstate.getState().equals(State.valid)) {
      keepPorts.add(hbstate.getHeartbeat().getPort());
    }
 else {
      if (hbstate.getHeartbeat() != null) {
        removed.put(workerid,hbstate.getHeartbeat().getTopologyId());
      }
 else {
        removed.put(workerid,null);
      }
      StringBuilder sb=new StringBuilder();
      sb.append("Shutting down and clearing state for id ");
      sb.append(workerid);
      sb.append(";State:");
      sb.append(hbstate);
      LOG.info(sb);
    }
  }
  shutWorker(conf,supervisorId,removed,workerThreadPids,cgroupManager);
  for (  String removedWorkerId : removed.keySet()) {
    localWorkerStats.remove(removedWorkerId);
  }
  return keepPorts;
}
