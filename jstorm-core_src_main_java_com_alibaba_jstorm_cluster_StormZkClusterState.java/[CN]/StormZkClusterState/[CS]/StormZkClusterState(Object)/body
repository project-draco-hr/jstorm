{
  if (cluster_state_spec instanceof ClusterState) {
    solo=false;
    cluster_state=(ClusterState)cluster_state_spec;
  }
 else {
    solo=true;
    cluster_state=new DistributedClusterState((Map)cluster_state_spec);
  }
  assignment_info_callback=new ConcurrentHashMap<String,RunnableCallback>();
  supervisors_callback=new AtomicReference<RunnableCallback>(null);
  assignments_callback=new AtomicReference<RunnableCallback>(null);
  storm_base_callback=new ConcurrentHashMap<String,RunnableCallback>();
  master_callback=new AtomicReference<RunnableCallback>(null);
  state_id=cluster_state.register(new ClusterStateCallback(){
    public <T>Object execute(    T... args){
      if (args == null) {
        LOG.warn("Input args is null");
        return null;
      }
 else       if (args.length < 2) {
        LOG.warn("Input args is invalid, args length:" + args.length);
        return null;
      }
      EventType zkEventTypes=(EventType)args[0];
      String path=(String)args[1];
      List<String> toks=PathUtils.tokenize_path(path);
      int size=toks.size();
      if (size >= 1) {
        String params=null;
        String root=toks.get(0);
        RunnableCallback fn=null;
        if (root.equals(Cluster.ASSIGNMENTS_ROOT)) {
          if (size == 1) {
            fn=assignments_callback.getAndSet(null);
          }
 else {
            params=toks.get(1);
            fn=assignment_info_callback.remove(params);
          }
        }
 else         if (root.equals(Cluster.SUPERVISORS_ROOT)) {
          fn=supervisors_callback.getAndSet(null);
        }
 else         if (root.equals(Cluster.STORMS_ROOT) && size > 1) {
          params=toks.get(1);
          fn=storm_base_callback.remove(params);
        }
 else         if (root.equals(Cluster.MASTER_ROOT)) {
          fn=master_callback.getAndSet(null);
        }
 else {
          LOG.error("Unknown callback for subtree " + path);
        }
        if (fn != null) {
          fn.run();
        }
      }
      return null;
    }
  }
);
  String[] pathlist=JStormUtils.mk_arr(Cluster.SUPERVISORS_SUBTREE,Cluster.STORMS_SUBTREE,Cluster.ASSIGNMENTS_SUBTREE,Cluster.ASSIGNMENTS_BAK_SUBTREE,Cluster.TASKS_SUBTREE,Cluster.TASKBEATS_SUBTREE,Cluster.TASKERRORS_SUBTREE,Cluster.METRIC_SUBTREE);
  for (  String path : pathlist) {
    cluster_state.mkdirs(path);
  }
}
