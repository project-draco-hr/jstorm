{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.topologyId=iprot.readString();
        struct.set_topologyId_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
    struct.topologyMasterId=iprot.readI32();
    struct.set_topologyMasterId_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map222=iprot.readMapBegin();
  struct.taskHbs=new HashMap<Integer,TaskHeartbeat>(2 * _map222.size);
  int _key223;
  TaskHeartbeat _val224;
  for (int _i225=0; _i225 < _map222.size; ++_i225) {
    _key223=iprot.readI32();
    _val224=new TaskHeartbeat();
    _val224.read(iprot);
    struct.taskHbs.put(_key223,_val224);
  }
  iprot.readMapEnd();
}
struct.set_taskHbs_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
