{
  long start=System.nanoTime();
  try {
    StormClusterState stormClusterState=data.getStormClusterState();
    String supervisorId=null;
    SupervisorInfo supervisorInfo=null;
    String ip=NetWorkUtils.host2Ip(host);
    String hostName=NetWorkUtils.ip2Host(host);
    Map<String,SupervisorInfo> supervisorInfos=Cluster.get_all_SupervisorInfo(stormClusterState,null);
    for (    Entry<String,SupervisorInfo> entry : supervisorInfos.entrySet()) {
      SupervisorInfo info=entry.getValue();
      if (info.getHostName().equals(hostName) || info.getHostName().equals(ip)) {
        supervisorId=entry.getKey();
        supervisorInfo=info;
        break;
      }
    }
    if (supervisorId == null) {
      throw new TException("No supervisor of " + host);
    }
    Map<String,Assignment> assignments=Cluster.get_all_assignment(stormClusterState,null);
    Map<Integer,WorkerSummary> portWorkerSummarys=new TreeMap<Integer,WorkerSummary>();
    Map<String,MetricInfo> metricInfoMap=new HashMap<String,MetricInfo>();
    int usedSlotNumber=0;
    Map<String,Map<Integer,String>> topologyTaskToComponent=new HashMap<String,Map<Integer,String>>();
    for (    Entry<String,Assignment> entry : assignments.entrySet()) {
      String topologyId=entry.getKey();
      Assignment assignment=entry.getValue();
      Set<ResourceWorkerSlot> workers=assignment.getWorkers();
      TopologyMetric topologyMetric=data.getMetricRunnable().getTopologyMetric(topologyId);
      for (      ResourceWorkerSlot worker : workers) {
        if (supervisorId.equals(worker.getNodeId()) == false) {
          continue;
        }
        usedSlotNumber++;
        Integer port=worker.getPort();
        WorkerSummary workerSummary=portWorkerSummarys.get(port);
        if (workerSummary == null) {
          workerSummary=new WorkerSummary();
          workerSummary.set_port(port);
          workerSummary.set_topology(topologyId);
          workerSummary.set_tasks(new ArrayList<TaskComponent>());
          portWorkerSummarys.put(port,workerSummary);
        }
        Map<Integer,String> taskToComponent=topologyTaskToComponent.get(topologyId);
        if (taskToComponent == null) {
          taskToComponent=Cluster.get_all_task_component(stormClusterState,topologyId,null);
          topologyTaskToComponent.put(topologyId,taskToComponent);
        }
        int earliest=TimeUtils.current_time_secs();
        for (        Integer taskId : worker.getTasks()) {
          TaskComponent taskComponent=new TaskComponent();
          taskComponent.set_component(taskToComponent.get(taskId));
          taskComponent.set_taskId(taskId);
          Integer startTime=assignment.getTaskStartTimeSecs().get(taskId);
          if (startTime != null && startTime < earliest) {
            earliest=startTime;
          }
          workerSummary.add_to_tasks(taskComponent);
        }
        workerSummary.set_uptime(TimeUtils.time_delta(earliest));
        if (topologyMetric == null) {
          LOG.warn("Failed to get topologyMetric of " + topologyId);
          continue;
        }
        String workerSlotName=TopologyMetricsRunnable.getWorkerSlotName(supervisorInfo.getHostName(),port);
        if (topologyMetric.get_workerMetric() != null) {
          MetricInfo workerMetricInfo=topologyMetric.get_workerMetric().get(workerSlotName);
          if (workerMetricInfo != null) {
            metricInfoMap.put(workerSlotName,workerMetricInfo);
          }
        }
      }
    }
    List<WorkerSummary> wokersList=new ArrayList<WorkerSummary>();
    wokersList.addAll(portWorkerSummarys.values());
    Map<String,Integer> supervisorToUsedSlotNum=new HashMap<String,Integer>();
    supervisorToUsedSlotNum.put(supervisorId,usedSlotNumber);
    SupervisorSummary supervisorSummary=NimbusUtils.mkSupervisorSummary(supervisorInfo,supervisorId,supervisorToUsedSlotNum);
    SupervisorWorkers ret=new SupervisorWorkers(supervisorSummary,wokersList,metricInfoMap);
    return ret;
  }
 catch (  TException e) {
    LOG.info("Failed to get ClusterSummary ",e);
    throw e;
  }
catch (  Exception e) {
    LOG.info("Failed to get ClusterSummary ",e);
    throw new TException(e);
  }
 finally {
    double spend=(System.nanoTime() - start) / 1000000.0d;
    SimpleJStormMetric.updateHistorgram("getSupervisorWorkers",spend);
    LOG.info("getSupervisorWorkers, {} spend {} ms",host,spend);
  }
}
