{
  Map<String,List<String>> workerId2Pids=new HashMap<String,List<String>>();
  boolean localMode=false;
  int maxWaitTime=0;
  for (  Entry<String,String> entry : removed.entrySet()) {
    String workerId=entry.getKey();
    String topologyId=entry.getValue();
    LOG.info("Begin to shut down " + topologyId + ":"+ workerId);
    try {
      String workerPidPath=StormConfig.worker_pids_root(conf,workerId);
      List<String> pids=PathUtils.read_dir_contents(workerPidPath);
      workerId2Pids.put(workerId,pids);
      String threadPid=workerThreadPids.get(workerId);
      if (threadPid != null) {
        ProcessSimulator.killProcess(threadPid);
        localMode=true;
        continue;
      }
      for (      String pid : pids) {
        JStormUtils.process_killed(Integer.parseInt(pid));
      }
      maxWaitTime=ConfigExtension.getTaskCleanupTimeoutSec(conf);
    }
 catch (    Exception e) {
      LOG.info("Failed to shutdown ",e);
    }
  }
  JStormUtils.sleepMs(maxWaitTime * 1000);
  for (  Entry<String,List<String>> entry : workerId2Pids.entrySet()) {
    String workerId=entry.getKey();
    List<String> pids=entry.getValue();
    if (localMode == false) {
      for (      String pid : pids) {
        JStormUtils.ensure_process_killed(Integer.parseInt(pid));
        if (cgroupManager != null) {
          cgroupManager.shutDownWorker(workerId,true);
        }
      }
    }
    tryCleanupWorkerDir(conf,workerId);
    LOG.info("Successfully shut down " + workerId);
  }
}
