{
  StormTopology ret=topology.deepCopy();
  boolean isSingleNode=ConfigExtension.isUseSingleNode(stormConf);
  Map<String,Object> components=ThriftTopologyUtils.getComponents(ret);
  for (  Entry<String,Object> entry : components.entrySet()) {
    Object component=entry.getValue();
    String componentName=entry.getKey();
    ComponentCommon common=null;
    if (component instanceof Bolt) {
      common=((Bolt)component).get_common();
    }
    if (component instanceof SpoutSpec) {
      common=((SpoutSpec)component).get_common();
    }
    if (component instanceof StateSpoutSpec) {
      common=((StateSpoutSpec)component).get_common();
    }
    Map componentMap=new HashMap();
    String jsonConfString=common.get_json_conf();
    if (jsonConfString != null) {
      componentMap.putAll((Map)JStormUtils.from_json(jsonConfString));
    }
    Integer taskNum=componentParalism(stormConf,common);
    componentMap.put(Config.TOPOLOGY_TASKS,taskNum);
    common.set_parallelism_hint(taskNum);
    LOG.info("Set " + componentName + " parallelism "+ taskNum);
    normalizeComponentResouce(componentMap,componentName);
    boolean allocDisk=ConfigExtension.isTaskAllocDisk(componentMap);
    if (allocDisk == true) {
      LOG.info("Topology:" + stormConf.get(Config.TOPOLOGY_NAME) + " alloc disk slot");
      ConfigExtension.setTaskOnDifferentNode(componentMap,true);
      ConfigExtension.setUseOldAssignment(componentMap,true);
    }
    if (isSingleNode == true) {
      boolean isTaskOnDiff=ConfigExtension.isTaskOnDifferentNode(componentMap);
      if (isTaskOnDiff == true && taskNum > 1) {
        StringBuilder sb=new StringBuilder();
        sb.append(componentName);
        sb.append(" has set TASK_ON_DIFFERENT_NODE ");
        sb.append(" which is conflict with global setting USE_SINGLE_NODE ");
        LOG.info(sb.toString());
        throw new FailedAssignTopologyException(sb.toString());
      }
    }
    common.set_json_conf(JStormUtils.to_json(componentMap));
  }
  return ret;
}
