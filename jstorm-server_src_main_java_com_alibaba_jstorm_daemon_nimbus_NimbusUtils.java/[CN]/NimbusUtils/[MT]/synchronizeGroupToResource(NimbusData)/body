{
  if (data.isGroupModel()) {
    Map<String,Map<ThriftResourceType,Integer>> groupToUsedResource=data.getGroupToUsedResource();
    Map<String,Map<String,Map<ThriftResourceType,Integer>>> groupToTopology=data.getGroupToTopology();
    for (    String group : groupToTopology.keySet()) {
      Map<ThriftResourceType,Integer> usedResource=new HashMap<ThriftResourceType,Integer>();
      usedResource.put(ThriftResourceType.CPU,0);
      usedResource.put(ThriftResourceType.MEM,0);
      usedResource.put(ThriftResourceType.DISK,0);
      usedResource.put(ThriftResourceType.NET,0);
      groupToUsedResource.put(group,usedResource);
      Map<String,Map<ThriftResourceType,Integer>> topologys=groupToTopology.get(group);
      if (topologys == null)       continue;
      for (      Entry<String,Map<ThriftResourceType,Integer>> entry : topologys.entrySet()) {
        Map<ThriftResourceType,Integer> topologyResource=entry.getValue();
        for (        Entry<ThriftResourceType,Integer> resourceEntry : topologyResource.entrySet()) {
          usedResource.put(resourceEntry.getKey(),usedResource.get(resourceEntry.getKey()) + resourceEntry.getValue());
        }
      }
    }
  }
}
