{
  List<Object> userDefines=JStormServerConfig.getUserDefineAssignmentFromJson(componentMap);
  if (userDefines == null) {
    return;
  }
  int maxCpu=Integer.MIN_VALUE;
  int maxMem=Integer.MIN_VALUE;
  Boolean useDisk=null;
  for (int index=0; index < userDefines.size(); index++) {
    ResourceAssignment userDefineAssign=ResourceAssignment.parseFromObj(userDefines.get(index));
    if (userDefineAssign == null) {
      String errMsg=componentName + " index task " + index+ " isn't ResourceAssignment ";
      LOG.warn(errMsg);
      throw new FailedAssignTopologyException(errMsg);
    }
    if (userDefineAssign.isCpuMemInvalid()) {
      StringBuilder sb=new StringBuilder();
      sb.append(componentName);
      sb.append(" index task " + index);
      sb.append(" ResourceAssignment is invalid ");
      sb.append(userDefineAssign);
      LOG.warn(sb.toString());
      throw new FailedAssignTopologyException(sb.toString());
    }
    if (maxCpu < userDefineAssign.getCpuSlotNum()) {
      maxCpu=userDefineAssign.getCpuSlotNum();
    }
    if (maxMem < userDefineAssign.getMemSlotNum()) {
      maxMem=userDefineAssign.getMemSlotNum();
    }
    if (useDisk == null) {
      useDisk=!StringUtils.isBlank(userDefineAssign.getDiskSlot());
    }
 else     if (useDisk == StringUtils.isBlank(userDefineAssign.getDiskSlot())) {
      StringBuilder sb=new StringBuilder();
      sb.append("No all tasks of ");
      sb.append(componentName);
      sb.append(" alloc disk, ");
      sb.append(" All tasks' alloc disk setting should be same.\n");
      sb.append(userDefines);
      LOG.warn(sb.toString());
      throw new FailedAssignTopologyException(sb.toString());
    }
  }
  int setTaskCpuSlot=ConfigExtension.getCpuSlotsPerTask(componentMap);
  if (maxCpu != setTaskCpuSlot) {
    StringBuilder sb=new StringBuilder();
    sb.append(componentName);
    sb.append(" CpuSlotsPerTask setting is  " + setTaskCpuSlot);
    sb.append(", but UserDefineAssignment cpu slot setting is " + maxCpu);
    LOG.warn(sb.toString());
    ConfigExtension.setCpuSlotsPerTask(componentMap,maxCpu);
  }
  int setTaskMemSlot=ConfigExtension.getMemSlotPerTask(componentMap);
  if (maxMem != setTaskMemSlot) {
    StringBuilder sb=new StringBuilder();
    sb.append(componentName);
    sb.append(" MEM_SLOTS_PER_TASK setting is  " + setTaskMemSlot);
    sb.append(", but USE_USERDEFINE_ASSIGNMENT memory slot setting is " + maxMem);
    LOG.warn(sb.toString());
    ConfigExtension.setMemSlotPerTask(componentMap,maxMem);
  }
  boolean setUseDisk=ConfigExtension.isTaskAllocDisk(componentMap);
  if (setUseDisk != useDisk) {
    StringBuilder sb=new StringBuilder();
    sb.append(componentName);
    sb.append(" ConfigExtension.isTaskAllocDisk setting is  " + setTaskMemSlot);
    sb.append(", but USE_USERDEFINE_ASSIGNMENT disk slot setting is " + useDisk);
    LOG.warn(sb.toString());
    ConfigExtension.setTaskAllocDisk(componentMap,useDisk);
  }
  return;
}
