{
  List<AsyncLoopThread> threads=new ArrayList<AsyncLoopThread>();
  AsyncLoopThread dispatcher=startDispatchThread();
  threads.add(dispatcher);
  RefreshConnections refreshConn=makeRefreshConnections();
  AsyncLoopThread refreshconn=new AsyncLoopThread(refreshConn,false,Thread.MIN_PRIORITY,true);
  threads.add(refreshconn);
  TimeTick timeTick=new TimeTick(workerData);
  AsyncLoopThread tick=new AsyncLoopThread(timeTick);
  threads.add(tick);
  RefreshActive refreshZkActive=new RefreshActive(workerData);
  AsyncLoopThread refreshzk=new AsyncLoopThread(refreshZkActive,false,Thread.MIN_PRIORITY,true);
  threads.add(refreshzk);
  BatchTupleRunable batchRunable=new BatchTupleRunable(workerData);
  AsyncLoopThread batch=new AsyncLoopThread(batchRunable,false,Thread.MAX_PRIORITY,true);
  threads.add(batch);
  DrainerRunable drainer=new DrainerRunable(workerData);
  AsyncLoopThread dr=new AsyncLoopThread(drainer,false,Thread.MAX_PRIORITY,true);
  threads.add(dr);
  AsyncLoopThread syncContainerHbThread=SyncContainerHb.mkWorkerInstance(workerData.getConf());
  if (syncContainerHbThread != null) {
    threads.add(syncContainerHbThread);
  }
  MetricReporter metricReporter=workerData.getMetricsReporter();
  boolean isMetricsEnable=ConfigExtension.isEnablePerformanceMetrics(workerData.getStormConf());
  metricReporter.setEnable(isMetricsEnable);
  metricReporter.start();
  LOG.info("Start metrics reporter, enable performance metrics: " + isMetricsEnable);
  TaskHeartbeatRunable taskHB=new TaskHeartbeatRunable(workerData);
  AsyncLoopThread taskHBThread=new AsyncLoopThread(taskHB);
  threads.add(taskHBThread);
  RunnableCallback heartbeat_fn=new WorkerHeartbeatRunable(workerData);
  AsyncLoopThread hb=new AsyncLoopThread(heartbeat_fn,false,null,Thread.NORM_PRIORITY,true);
  threads.add(hb);
  List<TaskShutdownDameon> shutdowntasks=createTasks();
  workerData.setShutdownTasks(shutdowntasks);
  dispatcher.start();
  return new WorkerShutdown(workerData,shutdowntasks,threads,metricReporter);
}
