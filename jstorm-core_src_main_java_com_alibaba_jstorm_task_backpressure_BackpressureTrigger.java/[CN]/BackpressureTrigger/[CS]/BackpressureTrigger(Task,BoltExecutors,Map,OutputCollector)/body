{
  super(stormConf);
  this.task=task;
  this.taskId=task.getTaskId();
  int sampleNum=ConfigExtension.getBackpressureTriggerSampleNumber(stormConf);
  int smapleInterval=sampleNum * (ConfigExtension.getBackpressureCheckIntervl(stormConf));
  this.intervalCheck=new IntervalCheck();
  this.intervalCheck.setIntervalMs(smapleInterval);
  this.intervalCheck.start();
  this.samplingSet=new ArrayList<EventType>();
  this.triggerSampleRate=ConfigExtension.getBackpressureTriggerSampleRate(stormConf);
  this.output=output;
  this.boltExecutor=boltExecutor;
  try {
    StormClusterState zkCluster=task.getZkCluster();
    Map<String,SourceBackpressureInfo> backpressureInfo=zkCluster.get_backpressure_info(task.getTopologyId());
    if (backpressureInfo != null) {
      for (      Entry<String,SourceBackpressureInfo> entry : backpressureInfo.entrySet()) {
        SourceBackpressureInfo info=entry.getValue();
        Map<String,TargetBackpressureInfo> targetInfoMap=info.getTargetTasks();
        if (targetInfoMap != null) {
          TargetBackpressureInfo targetInfo=targetInfoMap.get(task.getComponentId());
          if (targetInfo != null && targetInfo.getTasks().contains(taskId)) {
            isBackpressureEnable=true;
            LOG.info("Retrieved backpressure info for task-" + taskId);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    LOG.info("Failed to get backpressure info from zk",e);
  }
  LOG.info("Finished BackpressureTrigger init, highWaterMark=" + highWaterMark + ", lowWaterMark="+ lowWaterMark+ ", sendInterval="+ intervalCheck.getInterval());
}
