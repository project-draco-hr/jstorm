def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.STRING):
                self.name = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.I32):
                self.parallel = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.STRING):
                self.type = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.LIST):
                self.taskIds = []
                (_etype140, _size137) = iprot.readListBegin()
                for _i141 in xrange(_size137):
                    _elem142 = iprot.readI32()
                    self.taskIds.append(_elem142)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 5):
            if (ftype == TType.LIST):
                self.errors = []
                (_etype146, _size143) = iprot.readListBegin()
                for _i147 in xrange(_size143):
                    _elem148 = ErrorInfo()
                    _elem148.read(iprot)
                    self.errors.append(_elem148)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
