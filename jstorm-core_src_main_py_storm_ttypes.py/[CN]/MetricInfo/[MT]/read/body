def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.MAP):
                self.metrics = {}
                (_ktype111, _vtype112, _size110) = iprot.readMapBegin()
                for _i114 in xrange(_size110):
                    _key115 = iprot.readString().decode('utf-8')
                    _val116 = {}
                    (_ktype118, _vtype119, _size117) = iprot.readMapBegin()
                    for _i121 in xrange(_size117):
                        _key122 = iprot.readI32()
                        _val123 = MetricSnapshot()
                        _val123.read(iprot)
                        _val116[_key122] = _val123
                    iprot.readMapEnd()
                    self.metrics[_key115] = _val116
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
