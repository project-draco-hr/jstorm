def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.MAP):
                self.metrics = {}
                (_ktype104, _vtype105, _size103) = iprot.readMapBegin()
                for _i107 in xrange(_size103):
                    _key108 = iprot.readString().decode('utf-8')
                    _val109 = {}
                    (_ktype111, _vtype112, _size110) = iprot.readMapBegin()
                    for _i114 in xrange(_size110):
                        _key115 = iprot.readI32()
                        _val116 = MetricSnapshot()
                        _val116.read(iprot)
                        _val109[_key115] = _val116
                    iprot.readMapEnd()
                    self.metrics[_key108] = _val109
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
