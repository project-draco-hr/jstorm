{
  this.conf=conf;
  this.collector=collector;
  this.id=context.getThisComponentId() + ":" + context.getThisTaskId();
  this.sendingQueue=new LinkedBlockingDeque<OnsTuple>();
  this.flowControl=JStormUtils.parseBoolean(conf.get(ONS_SPOUT_FLOW_CONTROL),true);
  this.autoAck=JStormUtils.parseBoolean(conf.get(ONS_SPOUT_AUTO_ACK),false);
  this.maxFailTimes=JStormUtils.parseLong(conf.get(ONS_MSG_MAX_FAIL_TIMES),5);
  StringBuilder sb=new StringBuilder();
  sb.append("Begin to init MetaSpout:").append(id);
  sb.append(", flowControl:").append(flowControl);
  sb.append(", autoAck:").append(autoAck);
  LOG.info(sb.toString());
  initMetricClient(context);
  try {
    consumerConfig=new ConsumerConfig(conf);
    consumer=ConsumerFactory.mkInstance(consumerConfig,this);
  }
 catch (  Exception e) {
    LOG.error("Failed to create Meta Consumer ",e);
    throw new RuntimeException("Failed to create MetaConsumer" + id,e);
  }
  if (consumer == null) {
    LOG.warn(id + " already exist consumer in current worker, don't need to fetch data ");
    new Thread(new Runnable(){
      @Override public void run(){
        while (true) {
          try {
            Thread.sleep(10000);
          }
 catch (          InterruptedException e) {
            break;
          }
          StringBuilder sb=new StringBuilder();
          sb.append("Only on meta consumer can be run on one process,");
          sb.append(" but there are mutliple spout consumes with the same topic@groupid meta, so the second one ");
          sb.append(id).append(" do nothing ");
          LOG.info(sb.toString());
        }
      }
    }
).start();
  }
  LOG.info("Successfully init " + id);
}
