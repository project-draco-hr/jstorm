{
  this.conf=conf;
  this.mqContext=mq_context;
  this.topologyId=topology_id;
  this.supervisorId=supervisor_id;
  this.port=port;
  this.workerId=worker_id;
  this.active=new AtomicBoolean(true);
  this.topologyStatus=StatusType.active;
  if (StormConfig.cluster_mode(conf).equals("distributed")) {
    String pid=JStormUtils.process_pid();
    String pidPath=StormConfig.worker_pid_path(conf,worker_id,pid);
    PathUtils.touch(pidPath);
    LOG.info("Current worker's pid is " + pidPath);
  }
  this.zkClusterstate=Cluster.mk_distributed_cluster_state(conf);
  this.zkCluster=Cluster.mk_storm_cluster_state(zkClusterstate);
  Map rawConf=StormConfig.read_supervisor_topology_conf(conf,topology_id);
  this.stormConf=new HashMap<Object,Object>();
  this.stormConf.putAll(conf);
  this.stormConf.putAll(rawConf);
  if (this.mqContext == null) {
    int zmqThreads=JStormUtils.parseInt(stormConf.get(Config.ZMQ_THREADS));
    int linger=JStormUtils.parseInt(stormConf.get(Config.ZMQ_LINGER_MILLIS));
    int maxQueueMsg=JStormUtils.parseInt(stormConf.get(ConfigExtension.ZMQ_MAX_QUEUE_MSG),ConfigExtension.DEFAULT_ZMQ_MAX_QUEUE_MSG);
    boolean isLocal=StormConfig.cluster_mode(conf).equals("local");
    boolean virtportZmq=JStormUtils.parseBoolean(stormConf.get(Config.STORM_LOCAL_MODE_ZMQ),false);
    this.mqContext=MQContext.mk_zmq_context(zmqThreads,linger,isLocal,virtportZmq,maxQueueMsg);
  }
  this.nodeportSocket=new ConcurrentHashMap<NodePort,ISendConnection>();
  this.taskNodeport=new ConcurrentHashMap<Integer,NodePort>();
  this.taskids=Cluster.readWorkerTaskids(zkCluster,topologyId,supervisorId,port);
  if (taskids == null || taskids.size() == 0) {
    throw new RuntimeException("No tasks running current workers");
  }
  LOG.info("Current worker taskList:" + taskids);
  this.tasksToComponent=Cluster.topology_task_info(zkCluster,topologyId);
  LOG.info("Map<taskId, component>:" + tasksToComponent);
  rawTopology=StormConfig.read_supervisor_topology_code(conf,topology_id);
  sysTopology=Common.system_topology(stormConf,rawTopology);
  contextMaker=new ContextMaker(stormConf,topology_id,worker_id,tasksToComponent,port,JStormUtils.mk_list(taskids));
  transferQueue=new LinkedBlockingQueue<TransferData>();
  LOG.info("Successfully create WorkerData");
}
