{
  Map<List<Integer>,List<MsgInfo>> ret=new HashMap<List<Integer>,List<MsgInfo>>();
  if (GrouperType.local_or_shuffle.equals(grouptype)) {
    ret.put(local_shuffer_grouper.grouper(null),batch);
  }
 else   if (GrouperType.global.equals(grouptype)) {
    ret.put(JStormUtils.mk_list(out_tasks.get(0)),batch);
  }
 else   if (GrouperType.fields.equals(grouptype)) {
    fields_grouper.batchGrouper(batch,ret);
  }
 else   if (GrouperType.all.equals(grouptype)) {
    ret.put(out_tasks,batch);
  }
 else   if (GrouperType.shuffle.equals(grouptype)) {
    ret.put(shuffer.grouper(null),batch);
  }
 else   if (GrouperType.none.equals(grouptype)) {
    int rnd=Math.abs(random.nextInt() % out_tasks.size());
    ret.put(JStormUtils.mk_list(out_tasks.get(rnd)),batch);
  }
 else   if (GrouperType.custom_obj.equals(grouptype) || GrouperType.custom_serialized.equals(grouptype)) {
    for (int i=0; i < batch.size(); i++) {
      MsgInfo msg=batch.get(i);
      List<Integer> out=custom_grouper.grouper(msg.values);
      List<MsgInfo> customBatch=ret.get(out);
      if (customBatch == null) {
        customBatch=JStormUtils.mk_list();
        ret.put(out,customBatch);
      }
      customBatch.add(msg);
    }
  }
 else   if (GrouperType.localFirst.equals(grouptype)) {
    ret.put(localFirst.grouper(null),batch);
  }
 else {
    LOG.warn("Unsupportted group type");
  }
  return ret;
}
